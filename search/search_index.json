{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rupertobot Rupertobot es mi nuevo dise\u00f1o para lograr un robot educativo, impreso en 3D, f\u00e1cil de montar en cualquier Aula-Taller de Tecnolog\u00eda. Lo estoy dise\u00f1ando para que sea modular, simple de programar. Rupertobot no es un robot velocista como Masaylo , pero a cambio tiene un control sobre su movimiento much\u00edsimo mayor que su primo. Adem\u00e1s, tiene bastante mejor localizado su centro de masas, lo que permite a\u00f1adirle un bol\u00edgrafo o un lapiz para que realice dibujos basados en algoritmos geom\u00e9tricos (vale, esto \u00faltimo es a\u00fan MUY MEJORABLE, pero prometo que podr\u00e1 hacerlo). Sensores y actuadores Como he dicho antes, Rupertobot intenta ser un robot modular para facilitar al m\u00e1ximo su montaje por parte de los no iniciados. Puede funcionar sin sensor ni actuador alguno, aparte de los t\u00edpicos stepper 28BYJ-48, que tantas alegr\u00edas nos han dado con Arduino, y que en Espa\u00f1a tienen su m\u00e1ximo exponente en su uso con el Escornabot . Estos motores, conocidos tambi\u00e9n como motores paso a paso, se caracterizan por ir rotando fracciones de grado si se excitan sus cuatro bobinas en el orden adecuado. En un principio, Si montas el Rupertobot s\u00f3lo con estos dos motores, podr\u00e1s programarlo para que avance y gire en cualquier sentido, con una precisi\u00f3n milim\u00e9trica (bueno... m\u00e1s o menos... que es un robot de los baratitos, no nos flipemos). No obstante, a medida que ganes confianza, podr\u00e1s dotar a tu Rupertobot de un sensor de distancia HC-SR04. Ello le permitir\u00e1 detectar obst\u00e1culos y esquivarlos (o embestirlos.. todo depende de t\u00ed). Tambi\u00e9n puedes completar el conjunto con dos sensores de infrarrojos modelo FC-51, que pueden usarse, a su vez, como sensores de distancia (con mucho menos alcance que el HCSR04), pero que a nosotros nos vendr\u00e1 mucho mejor utilizar como discriminadores blanco-negro, para poder programar al Rupertobot como siguel\u00edneas o resuelvelaberintos. De hecho, aqu\u00ed tienes un detalle de c\u00f3mo ir\u00edan montados un tipo de estos sensores, o los dos, dentro del Rupertobot. Si no los vas a usar, no necesitas imprimir la pieza de soporte de sensores. Para finalizar, si as\u00ed lo deseas (y no te importa el ruido infernal que puede montarse en un momento), tambi\u00e9n puedes montar un peque\u00f1o zumbador para dotar al Rupertobot con la posibilidad de emitir sonidos. No me importa reconocer que esta pieza no es m\u00eda, es obra de Federico Coca , y me he tomado la libertad de importarla desde la p\u00e1gina del Escornabot . Aqu\u00ed te dejo un detalle de c\u00f3mo quedar\u00eda instalado el zumbador dentro de la plataforma superior: Un detalle que no podemos dejar pasar: las ruedas del Rupertobot no son operativas sin neum\u00e1ticos. Para ello necesitar\u00e1s unas juntas t\u00f3ricas de unos 75 mm de di\u00e1metro exterior y al menos 3 mm de grosor (parece una tonter\u00eda, pero a la larga es lo que m\u00e1s dif\u00edcil se me hace de encontrar). Las medidas pueden variar un par de mm en su raio exterior, pero mejor si al menos es as\u00ed de gruesa. Programaci\u00f3n Nosotros programaremos el Rupertobot con mi aplicaci\u00f3n MasayloBlockly , pero t\u00fa puedes utilizar el IDE que quieras (en realidad, lo m\u00e1s educativo ser\u00eda usar el de Arduino, pero en un aula de Tecnolog\u00eda, en una clase de 55 minutos, el tiempo es limitad\u00edsimo).","title":"Introducci\u00f3n"},{"location":"#rupertobot","text":"Rupertobot es mi nuevo dise\u00f1o para lograr un robot educativo, impreso en 3D, f\u00e1cil de montar en cualquier Aula-Taller de Tecnolog\u00eda. Lo estoy dise\u00f1ando para que sea modular, simple de programar. Rupertobot no es un robot velocista como Masaylo , pero a cambio tiene un control sobre su movimiento much\u00edsimo mayor que su primo. Adem\u00e1s, tiene bastante mejor localizado su centro de masas, lo que permite a\u00f1adirle un bol\u00edgrafo o un lapiz para que realice dibujos basados en algoritmos geom\u00e9tricos (vale, esto \u00faltimo es a\u00fan MUY MEJORABLE, pero prometo que podr\u00e1 hacerlo).","title":"Rupertobot"},{"location":"#sensores-y-actuadores","text":"Como he dicho antes, Rupertobot intenta ser un robot modular para facilitar al m\u00e1ximo su montaje por parte de los no iniciados. Puede funcionar sin sensor ni actuador alguno, aparte de los t\u00edpicos stepper 28BYJ-48, que tantas alegr\u00edas nos han dado con Arduino, y que en Espa\u00f1a tienen su m\u00e1ximo exponente en su uso con el Escornabot . Estos motores, conocidos tambi\u00e9n como motores paso a paso, se caracterizan por ir rotando fracciones de grado si se excitan sus cuatro bobinas en el orden adecuado. En un principio, Si montas el Rupertobot s\u00f3lo con estos dos motores, podr\u00e1s programarlo para que avance y gire en cualquier sentido, con una precisi\u00f3n milim\u00e9trica (bueno... m\u00e1s o menos... que es un robot de los baratitos, no nos flipemos). No obstante, a medida que ganes confianza, podr\u00e1s dotar a tu Rupertobot de un sensor de distancia HC-SR04. Ello le permitir\u00e1 detectar obst\u00e1culos y esquivarlos (o embestirlos.. todo depende de t\u00ed). Tambi\u00e9n puedes completar el conjunto con dos sensores de infrarrojos modelo FC-51, que pueden usarse, a su vez, como sensores de distancia (con mucho menos alcance que el HCSR04), pero que a nosotros nos vendr\u00e1 mucho mejor utilizar como discriminadores blanco-negro, para poder programar al Rupertobot como siguel\u00edneas o resuelvelaberintos. De hecho, aqu\u00ed tienes un detalle de c\u00f3mo ir\u00edan montados un tipo de estos sensores, o los dos, dentro del Rupertobot. Si no los vas a usar, no necesitas imprimir la pieza de soporte de sensores. Para finalizar, si as\u00ed lo deseas (y no te importa el ruido infernal que puede montarse en un momento), tambi\u00e9n puedes montar un peque\u00f1o zumbador para dotar al Rupertobot con la posibilidad de emitir sonidos. No me importa reconocer que esta pieza no es m\u00eda, es obra de Federico Coca , y me he tomado la libertad de importarla desde la p\u00e1gina del Escornabot . Aqu\u00ed te dejo un detalle de c\u00f3mo quedar\u00eda instalado el zumbador dentro de la plataforma superior: Un detalle que no podemos dejar pasar: las ruedas del Rupertobot no son operativas sin neum\u00e1ticos. Para ello necesitar\u00e1s unas juntas t\u00f3ricas de unos 75 mm de di\u00e1metro exterior y al menos 3 mm de grosor (parece una tonter\u00eda, pero a la larga es lo que m\u00e1s dif\u00edcil se me hace de encontrar). Las medidas pueden variar un par de mm en su raio exterior, pero mejor si al menos es as\u00ed de gruesa.","title":"Sensores y actuadores"},{"location":"#programacion","text":"Nosotros programaremos el Rupertobot con mi aplicaci\u00f3n MasayloBlockly , pero t\u00fa puedes utilizar el IDE que quieras (en realidad, lo m\u00e1s educativo ser\u00eda usar el de Arduino, pero en un aula de Tecnolog\u00eda, en una clase de 55 minutos, el tiempo es limitad\u00edsimo).","title":"Programaci\u00f3n"},{"location":"about/","text":"\u00bfQui\u00e9n soy? \u00a1Vaya pregunta! Autor : Antonio G\u00f3mez Garc\u00eda Bio : Profe, padre y tecn\u00f3logo. Soy penoso en al menos dos de esos perfiles, pero lo intento con toda mi alma todos los d\u00edas. Soy profe en el IES Maestro Juan de \u00c1vila de Ciudad Real, como profe de Tecnolog\u00eda, de Rob\u00f3tica y de \u00c1mbito Cient\u00edfico-Tecnol\u00f3gico para los alumnos de Diversificaci\u00f3n Curricular. Estos \u00faltimos a\u00f1os es lo que m\u00e1s he disfrutado profesionalmente. Como no tengo bastante encima, en la actualidad soy Jefe de Estudios Adjunto, lo que me garantiza un aluvi\u00f3n diario de marrones que voy toreando como mejor puedo, \u00a1apenas sin llorar!. Soy padre del robot Masaylo , que los amiguetes del Club de Rob\u00f3tica de Granada me ayudaron a digievolucionar hasta su versi\u00f3n 2.0. Soy aficionado a la rob\u00f3tica, la impresi\u00f3n 3D, y el mundo maker en general. Presencia en las redes : Puedes echar un vistazo a mis movidas en mi web del Aprendiz de Tecn\u00f3logo ; aunque la tengo un poco desactualizada, la estoy recuperando. Tambi\u00e9n act\u00fao bastante en Twitter (sigo llamando Pryca al Carrefour, me vas a decir a m\u00ed que llame a esto X). Publicaciones Aparte de art\u00edculos varios en distintos medios (puedes cotejarlos en mi web), soy el orgulloso coautor de dos libros: Rob\u00f3tica con Arduino y Scratch en el cole , gracias al buen hacer y la disposici\u00f3n de los amigos de Serendipia Editorial Motivaciones Tengo hambre de SABER, porque quiero ENTENDER. Nadie dijo que tengas que hacerme caso. Yo no lo har\u00eda.","title":"\u00bfQui\u00e9n soy?"},{"location":"about/#quien-soy-vaya-pregunta","text":"Autor : Antonio G\u00f3mez Garc\u00eda Bio : Profe, padre y tecn\u00f3logo. Soy penoso en al menos dos de esos perfiles, pero lo intento con toda mi alma todos los d\u00edas. Soy profe en el IES Maestro Juan de \u00c1vila de Ciudad Real, como profe de Tecnolog\u00eda, de Rob\u00f3tica y de \u00c1mbito Cient\u00edfico-Tecnol\u00f3gico para los alumnos de Diversificaci\u00f3n Curricular. Estos \u00faltimos a\u00f1os es lo que m\u00e1s he disfrutado profesionalmente. Como no tengo bastante encima, en la actualidad soy Jefe de Estudios Adjunto, lo que me garantiza un aluvi\u00f3n diario de marrones que voy toreando como mejor puedo, \u00a1apenas sin llorar!. Soy padre del robot Masaylo , que los amiguetes del Club de Rob\u00f3tica de Granada me ayudaron a digievolucionar hasta su versi\u00f3n 2.0. Soy aficionado a la rob\u00f3tica, la impresi\u00f3n 3D, y el mundo maker en general. Presencia en las redes : Puedes echar un vistazo a mis movidas en mi web del Aprendiz de Tecn\u00f3logo ; aunque la tengo un poco desactualizada, la estoy recuperando. Tambi\u00e9n act\u00fao bastante en Twitter (sigo llamando Pryca al Carrefour, me vas a decir a m\u00ed que llame a esto X). Publicaciones Aparte de art\u00edculos varios en distintos medios (puedes cotejarlos en mi web), soy el orgulloso coautor de dos libros: Rob\u00f3tica con Arduino y Scratch en el cole , gracias al buen hacer y la disposici\u00f3n de los amigos de Serendipia Editorial Motivaciones Tengo hambre de SABER, porque quiero ENTENDER. Nadie dijo que tengas que hacerme caso. Yo no lo har\u00eda.","title":"\u00bfQui\u00e9n soy? \u00a1Vaya pregunta!"},{"location":"adelante/","text":"Movimiento hacia adelante Introducci\u00f3n Si hiciste el ejemplo anterior, est\u00e1s preparado para crear distintos programas que permitan a tu Rupertobot moverse hacia adelante y hacia atr\u00e1s, o moverse en cualquier sentido. Adelante Si comprendiste el programa del ejemplo anterior , entender\u00e1s ahora que para que tu Rupertobot se mueva hacia adelante, la rueda derecha deber\u00eda girar en sentido horario, mientras que la izquierda deber\u00eda hacerlo en sentido antihorario . Esto implica que iremos activando los pines 2->3->4->5 en este orden para el motor derecho, y al mismo tiempo excitaremos 9->8->7->6 para el motor izquierdo: Programa en MasayloBlockly La cosa no se complica demasiado. S\u00f3lo ten en cuenta que los grupos de cuatro pines se excitan en \u00f3rdenes contrarios: Programa tu Arduino Si prefieres tirar del IDE de Arduino, el c\u00f3digo b\u00e1sico ser\u00eda: void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); } Descarga el programa Hacia adelante, programa para MasayloBlockly Hacia adelante, programa para IDE de Arduino","title":"Hacia adelante"},{"location":"adelante/#movimiento-hacia-adelante","text":"","title":"Movimiento  hacia adelante"},{"location":"adelante/#introduccion","text":"Si hiciste el ejemplo anterior, est\u00e1s preparado para crear distintos programas que permitan a tu Rupertobot moverse hacia adelante y hacia atr\u00e1s, o moverse en cualquier sentido.","title":"Introducci\u00f3n"},{"location":"adelante/#adelante","text":"Si comprendiste el programa del ejemplo anterior , entender\u00e1s ahora que para que tu Rupertobot se mueva hacia adelante, la rueda derecha deber\u00eda girar en sentido horario, mientras que la izquierda deber\u00eda hacerlo en sentido antihorario . Esto implica que iremos activando los pines 2->3->4->5 en este orden para el motor derecho, y al mismo tiempo excitaremos 9->8->7->6 para el motor izquierdo:","title":"Adelante"},{"location":"adelante/#programa-en-masayloblockly","text":"La cosa no se complica demasiado. S\u00f3lo ten en cuenta que los grupos de cuatro pines se excitan en \u00f3rdenes contrarios:","title":"Programa en MasayloBlockly"},{"location":"adelante/#programa-tu-arduino","text":"Si prefieres tirar del IDE de Arduino, el c\u00f3digo b\u00e1sico ser\u00eda: void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); }","title":"Programa tu Arduino"},{"location":"adelante/#descarga-el-programa","text":"Hacia adelante, programa para MasayloBlockly Hacia adelante, programa para IDE de Arduino","title":"Descarga el programa"},{"location":"adelanteAtras/","text":"Funciones (I) Introducci\u00f3n Como habr\u00e1s notado hasta ahora, podemos mover nuestro Rupertobot, pero los movimientos que obtenemos son continuos, esto es, no podemos alternarlos. Si empieza a moverse hacia adelante, as\u00ed seguir\u00e1 hasta que le cambiemos el programa. Es hora de darle un poco m\u00e1s de funcionalidad a nuestro robotejo, y para eso vamos a utilizar funciones. Una primera aproximaci\u00f3n Para empezar, si yo quisiera que mi Rupertobot fuera hacia adelante durante un tiempo, luego hacia atr\u00e1s, giro izquierda, y giro derecha, para al final parar, podr\u00eda usar bucles para repetir las secuencias que hemos visto en los ejemplos anteriores en el orden mencionado. Para el primer movimiento hacia adelante (no hago m\u00e1s porque la imagen que lo ilustrara ser\u00eda kilom\u00e9trica), har\u00edamos algo as\u00ed: \u00bfQu\u00e9 es lo que he hecho? He usado un bucle. Como hemos dicho antes, tomaremos como referencia el hecho de que los steppers de nuestro Rupertobot necesitan 2048 pasos para dar una vuelta completa. Si te fijas bien en el primer ejemplo para mover el robot adelante, hay que explicar la secuencia de los 4 pasos al microcontrolador. Por lo tanto, si ese programa estipula 4 pasos, y quiero que de 2048 antes de pararse, pues como 2048/4=512, el bucle deber\u00e1 repetirse 512 veces. \u00bfC\u00f3mo simplificar la programaci\u00f3n? \u00a1Con funciones! Bueno, s\u00ed... Parece muy largo. La secuencia completa que hemos sugerido en el apartado anterior exigir\u00eda un programa cuatro veces m\u00e1s largo que el de la imagen. As\u00ed que vamos a explicarte qu\u00e9 es una funci\u00f3n: Una funci\u00f3n es un conjunto de \u00f3rdenes asociadas a un nombre que puede aceptar o proporcionar par\u00e1metros . \u00bfC\u00f3mo?. \u00bfQue no te has enterado?. Lo confieso, yo tampoco. Vamos a intentar irlo explicando con ejemplos: Configurar MasayloBlockly Si vas a utilizar el programa MasayloBlockly que desarrollamos desde el IES Maestro Juan de \u00c1vila (es algo artesanal, pero en clase nos est\u00e1 resultando muy \u00fatil), debes saber que por motivos de espacio, no suelen aparecer en el men\u00fa de bloques de la izquierda todas las opciones. Si quieres alg\u00fan elemento (como es este caso) que no te aparezca, debes pinchar en el s\u00edmbolo del engranaje ( Preferencias ), seleccionar la opci\u00f3n Nivel experto , y dentro del abanico de posibilidades, elige Funciones . Aseg\u00farate tambi\u00e9n de dejar marcada la opci\u00f3n Entrada/Salida , que es la que te permite ir escribiendo unos y ceros en los pines de Arduino Mi primera funci\u00f3n Para empezar, vamos a crear una funci\u00f3n muy simplificada, sin par\u00e1metros, que llamaremos simplemente adelante . Esta funci\u00f3n se encargar\u00e1 de lo mismo que hemos hecho antes, es decir, impulsar al Rupertobot hacia adelante hasta que ambas ruedas den una revoluci\u00f3n completa. Para ello, elige el bloque Funciones , y selecciona la primera pieza de puzzle, Hacer : Del programa anterior, quita la pieza Fin (no queremos interrumpir el programa definitivamente), y arrastra el resto dentro de la pieza Hacer (cambia el nombre hacer por adelante ): Si volcaras el programa en el Rupertobot, ver\u00edas que no hace nada a\u00fan. Se queda quieto. Parado. Como muerto. Qu\u00e9 penita da, \u00bfverdad?. Eso es porque hemos definido una funci\u00f3n, pero no la hemos ejecutado a\u00fan. Esto es, hemos asociado al nombre adelante un conjunto de \u00f3rdenes que repetir\u00e1 512 veces el proceso de mover las cuatro bobinas de cada uno de los dos stepper. Pero no hemos dado la orden de ejecutar la funci\u00f3n. Vamos a resolver esto. Si te fijas, ahora, en el bloque Funciones aparece una nueva pieza, adelante , que puedes ir arrastrando al escritorio principal de la aplicaci\u00f3n. Para que veas c\u00f3mo funciona, vamos a crear el siguiente programa: Si lo has hecho correctamente, ver\u00e1s que ahora el Rupertobot avanza 3 veces, en una secuencia espaciada cada 3 segundos, una distancia correspondiente a una revoluci\u00f3n completa de cada rueda, esto es, para una rueda de unos 80 mm de di\u00e1metro, aproximadamente de 3,14*80=251,33 mm. Por supuesto, la idea es que podamos especificar la distancia que queremos que haga o incluso el \u00e1ngulo que queremos de giro, pero esto ser\u00e1 objeto de otra secci\u00f3n en esta web. En otro orden de cosas, el di\u00e1metro que estamos tomando como referencia puede variar ligeramente, dependiendo del grosor de las juntas t\u00f3ricas que estemos usando cubiertas de las ruedas. Las ruedas de pl\u00e1stico tienen 72 mm de di\u00e1metro, a lo que habr\u00eda que a\u00f1adir el di\u00e1metro de las juntas utilizadas menos un par de mm para compensar. Si quieres un consejo (no tienes por qu\u00e9), mide t\u00fa directamente las ruedas de tu Rupertobot. Programa tu Arduino Si quieres ver c\u00f3mo quedar\u00eda la funci\u00f3n adelante en la IDE de Arduino, te dejo el c\u00f3digo en C++ con esta funci\u00f3n y c\u00f3mo se ejecutar\u00eda tres veces, tal y como especific\u00e1bamos en el primer ejemplo: void adelante() { for (int count=0 ; count<512 ; count++) { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); } } void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop(){ adelante(); delay(3000); adelante(); delay(3000); adelante(); delay(3000); while(true); } \u00a1Bueno! Vamos avanzando... Si has pillado la t\u00f3nica general del asunto (estoy seguro de que s\u00ed), s\u00f3lo tendr\u00edas que repetir el proceso para generar las funciones atras , izquierda y derecha . De todos modos, en el \u00faltimo punto te dejo todo listo para descargar y que t\u00fa te limites a aprender experimentando con ello. \u00a1Disfr\u00fatalo!. Descarga los programas Ejemplo de funciones adelante, atr\u00e1s, izquierda y derecha para MasayloBlockly Ejemplo de funciones adelante, atr\u00e1s, izquierda y derecha para la IDE de Arduino","title":"Uso de funciones(I)"},{"location":"adelanteAtras/#funciones-i","text":"","title":"Funciones (I)"},{"location":"adelanteAtras/#introduccion","text":"Como habr\u00e1s notado hasta ahora, podemos mover nuestro Rupertobot, pero los movimientos que obtenemos son continuos, esto es, no podemos alternarlos. Si empieza a moverse hacia adelante, as\u00ed seguir\u00e1 hasta que le cambiemos el programa. Es hora de darle un poco m\u00e1s de funcionalidad a nuestro robotejo, y para eso vamos a utilizar funciones.","title":"Introducci\u00f3n"},{"location":"adelanteAtras/#una-primera-aproximacion","text":"Para empezar, si yo quisiera que mi Rupertobot fuera hacia adelante durante un tiempo, luego hacia atr\u00e1s, giro izquierda, y giro derecha, para al final parar, podr\u00eda usar bucles para repetir las secuencias que hemos visto en los ejemplos anteriores en el orden mencionado. Para el primer movimiento hacia adelante (no hago m\u00e1s porque la imagen que lo ilustrara ser\u00eda kilom\u00e9trica), har\u00edamos algo as\u00ed: \u00bfQu\u00e9 es lo que he hecho? He usado un bucle. Como hemos dicho antes, tomaremos como referencia el hecho de que los steppers de nuestro Rupertobot necesitan 2048 pasos para dar una vuelta completa. Si te fijas bien en el primer ejemplo para mover el robot adelante, hay que explicar la secuencia de los 4 pasos al microcontrolador. Por lo tanto, si ese programa estipula 4 pasos, y quiero que de 2048 antes de pararse, pues como 2048/4=512, el bucle deber\u00e1 repetirse 512 veces.","title":"Una primera aproximaci\u00f3n"},{"location":"adelanteAtras/#como-simplificar-la-programacion-con-funciones","text":"Bueno, s\u00ed... Parece muy largo. La secuencia completa que hemos sugerido en el apartado anterior exigir\u00eda un programa cuatro veces m\u00e1s largo que el de la imagen. As\u00ed que vamos a explicarte qu\u00e9 es una funci\u00f3n: Una funci\u00f3n es un conjunto de \u00f3rdenes asociadas a un nombre que puede aceptar o proporcionar par\u00e1metros . \u00bfC\u00f3mo?. \u00bfQue no te has enterado?. Lo confieso, yo tampoco. Vamos a intentar irlo explicando con ejemplos:","title":"\u00bfC\u00f3mo simplificar la programaci\u00f3n? \u00a1Con funciones!"},{"location":"adelanteAtras/#configurar-masayloblockly","text":"Si vas a utilizar el programa MasayloBlockly que desarrollamos desde el IES Maestro Juan de \u00c1vila (es algo artesanal, pero en clase nos est\u00e1 resultando muy \u00fatil), debes saber que por motivos de espacio, no suelen aparecer en el men\u00fa de bloques de la izquierda todas las opciones. Si quieres alg\u00fan elemento (como es este caso) que no te aparezca, debes pinchar en el s\u00edmbolo del engranaje ( Preferencias ), seleccionar la opci\u00f3n Nivel experto , y dentro del abanico de posibilidades, elige Funciones . Aseg\u00farate tambi\u00e9n de dejar marcada la opci\u00f3n Entrada/Salida , que es la que te permite ir escribiendo unos y ceros en los pines de Arduino","title":"Configurar MasayloBlockly"},{"location":"adelanteAtras/#mi-primera-funcion","text":"Para empezar, vamos a crear una funci\u00f3n muy simplificada, sin par\u00e1metros, que llamaremos simplemente adelante . Esta funci\u00f3n se encargar\u00e1 de lo mismo que hemos hecho antes, es decir, impulsar al Rupertobot hacia adelante hasta que ambas ruedas den una revoluci\u00f3n completa. Para ello, elige el bloque Funciones , y selecciona la primera pieza de puzzle, Hacer : Del programa anterior, quita la pieza Fin (no queremos interrumpir el programa definitivamente), y arrastra el resto dentro de la pieza Hacer (cambia el nombre hacer por adelante ): Si volcaras el programa en el Rupertobot, ver\u00edas que no hace nada a\u00fan. Se queda quieto. Parado. Como muerto. Qu\u00e9 penita da, \u00bfverdad?. Eso es porque hemos definido una funci\u00f3n, pero no la hemos ejecutado a\u00fan. Esto es, hemos asociado al nombre adelante un conjunto de \u00f3rdenes que repetir\u00e1 512 veces el proceso de mover las cuatro bobinas de cada uno de los dos stepper. Pero no hemos dado la orden de ejecutar la funci\u00f3n. Vamos a resolver esto. Si te fijas, ahora, en el bloque Funciones aparece una nueva pieza, adelante , que puedes ir arrastrando al escritorio principal de la aplicaci\u00f3n. Para que veas c\u00f3mo funciona, vamos a crear el siguiente programa: Si lo has hecho correctamente, ver\u00e1s que ahora el Rupertobot avanza 3 veces, en una secuencia espaciada cada 3 segundos, una distancia correspondiente a una revoluci\u00f3n completa de cada rueda, esto es, para una rueda de unos 80 mm de di\u00e1metro, aproximadamente de 3,14*80=251,33 mm. Por supuesto, la idea es que podamos especificar la distancia que queremos que haga o incluso el \u00e1ngulo que queremos de giro, pero esto ser\u00e1 objeto de otra secci\u00f3n en esta web. En otro orden de cosas, el di\u00e1metro que estamos tomando como referencia puede variar ligeramente, dependiendo del grosor de las juntas t\u00f3ricas que estemos usando cubiertas de las ruedas. Las ruedas de pl\u00e1stico tienen 72 mm de di\u00e1metro, a lo que habr\u00eda que a\u00f1adir el di\u00e1metro de las juntas utilizadas menos un par de mm para compensar. Si quieres un consejo (no tienes por qu\u00e9), mide t\u00fa directamente las ruedas de tu Rupertobot.","title":"Mi primera funci\u00f3n"},{"location":"adelanteAtras/#programa-tu-arduino","text":"Si quieres ver c\u00f3mo quedar\u00eda la funci\u00f3n adelante en la IDE de Arduino, te dejo el c\u00f3digo en C++ con esta funci\u00f3n y c\u00f3mo se ejecutar\u00eda tres veces, tal y como especific\u00e1bamos en el primer ejemplo: void adelante() { for (int count=0 ; count<512 ; count++) { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); } } void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop(){ adelante(); delay(3000); adelante(); delay(3000); adelante(); delay(3000); while(true); }","title":"Programa tu Arduino"},{"location":"adelanteAtras/#bueno-vamos-avanzando","text":"Si has pillado la t\u00f3nica general del asunto (estoy seguro de que s\u00ed), s\u00f3lo tendr\u00edas que repetir el proceso para generar las funciones atras , izquierda y derecha . De todos modos, en el \u00faltimo punto te dejo todo listo para descargar y que t\u00fa te limites a aprender experimentando con ello. \u00a1Disfr\u00fatalo!.","title":"\u00a1Bueno! Vamos avanzando..."},{"location":"adelanteAtras/#descarga-los-programas","text":"Ejemplo de funciones adelante, atr\u00e1s, izquierda y derecha para MasayloBlockly Ejemplo de funciones adelante, atr\u00e1s, izquierda y derecha para la IDE de Arduino","title":"Descarga los programas"},{"location":"adelanteAtras2/","text":"Funciones (II) Introducci\u00f3n Si has le\u00eddo la secci\u00f3n anterior (es lo que uno supondr\u00eda m\u00e1s l\u00f3gico, pero cuando hablamos de estudiantes de Educaci\u00f3n Secundaria, nunca desecho ninguna hip\u00f3tesis), habr\u00e1s aprendido a crear funciones de modo que puedes repetir el c\u00f3digo varias veces, tantas como te limites a llamar a cada funci\u00f3n por su nombre. No obstante, tambi\u00e9n hemos explicado que con ese enfoque, cada vez que llamemos a la funci\u00f3n adelante , por ejemplo, Rupertobot siempre avanzar\u00e1 exactamente la misma distancia: 3,14 multiplicado por 80, es decir, 251,33 mm (m\u00e1s o menos). Esto es as\u00ed porque tal y como hemos construido la funci\u00f3n, \u00e9sta siempre se va a ejecutar exactamente del mismo modo, tal y como la hemos escrito. Lo ideal, ahora, ser\u00eda que pudi\u00e9ramos introducir un valor que permitiera a adelante repetir el bucle de su interior un n\u00famero de veces variable, seg\u00fan la distancia que queramos avanzar. Para ello, pasamos a explicar c\u00f3mo usar par\u00e1metros con nuestras funciones. Justificaci\u00f3n matem\u00e1tica Lo que queremos hacer es usar funciones param\u00e9tricas en las que indiquemos en los casos de adelante y atras , cu\u00e1ntos cent\u00edmetros queremos movernos, y en el de izquierda y derecha , cu\u00e1ntos grados queremos girar. Tiremos, entonces, de nuestros conocimientos de geometr\u00eda: La funci\u00f3n adelante original genera un total de 2048 pasos hacia adelante, lo que corresponde a una revoluci\u00f3n completa en ambas ruedas del Rupertobot. Como el di\u00e1metro de dichas ruedas es alrededor de unos 80 mm (ya te he dicho que este dato var\u00eda seg\u00fan el grosor de las juntas t\u00f3ricas), conociendo la f\u00f3rmula de la longitud de una circunferencia, sabemos que eso equivaldr\u00eda a un avance de 251,33 mm, o mejor, 25,13 cm. Qu\u00e9date con el dato: 2048 pasos->25,13 cm. Lo que resta es una regla de tres (que me perdonen los profes de Matem\u00e1ticas, s\u00e9 que esto no est\u00e1 bien visto) sencilla: Si 25,13 cm exigen 2048 pasos, entonces avanzar 1 cm exigir\u00e1 2048/25,13=81,4873 pasos. Ten en cuenta que el algoritmo inicial de adelante aplica 4 pasos a cada repetici\u00f3n, as\u00ed que 81,4873/4=20,3718. \u00c9se es el n\u00famero de veces que tenemos que repetir este proceso por cada cm que queremos avanzar. Nota para tiquismiquis: si est\u00e1s comprobando mi explicaci\u00f3n calculadora en mano, puede que te baile alg\u00fan n\u00famero a la altura de mil\u00e9simas o diezmil\u00e9simas, no lo estoy comprobando. Los n\u00fameros que manejo los saco de mi propia calculadora sin usar redondeos. Si quieres cambiar algo, eres muy libre, es tu robot . Por otro lado, si has probado la funci\u00f3n izquierda o derecha , ver\u00e1s que como hacen avanzar una revoluci\u00f3n completa a cada rueda (2048 pasos), haremos que el robot gire sobre su eje 180\u00ba. \u00bfCu\u00e1ntos pasos necesito avanzar por grado sexagesimal, entonces?. La aritm\u00e9tica es sencilla, de nuevo. La funci\u00f3n original, que da 2048 pasos, implica un giro de 180\u00ba. As\u00ed que un s\u00f3lo grado corresponder\u00e1 a 2048/180=11,3778 pasos. Teniendo en cuenta que las funciones originales implican 4 pasos por repetici\u00f3n, el algoritmo original deber\u00eda repetirse 2.8444 veces por grado sexagesimal. Qu\u00e9date, pues, con esos dos n\u00fameros: 20,3718 y 2,8444 Lo que vamos a hacer a continuaci\u00f3n es modificar nuestras funciones para que acepten par\u00e1metros. Si has entendido el concepto de que una funci\u00f3n es un grupo de \u00f3rdenes asociadas a un nombre (por ejemplo, adelante ) que se ejecutan en orden cuando se llama a dicho nombre, entender\u00e1s ahora que las funciones pueden trabajar con par\u00e1metros. Un par\u00e1metro, o argumento, es un dato (de cualquier tipo, n\u00famero entero, decimal, l\u00f3gico... incluso se aceptan caracteres) que puedo dar yo a la funci\u00f3n para que lo utilice de alg\u00fan modo ( par\u00e1metros/argumentos de entrada ) o que puedo pedir a la funci\u00f3n que me devuelva despu\u00e9s de ejecutarse, como consecuencia de alg\u00fan c\u00e1lculo ( par\u00e1metros/argumentos de salida ). Lo s\u00e9, lo s\u00e9. Parece complicado. El movimiento se demuestra andando, as\u00ed que vamos con ello. Uso de funciones con argumentos En este caso, vamos a trabajar con argumentos de entrada . Esto significa que cuando yo ejecute una funci\u00f3n, primero tengo que proporcionarle un dato (en la funci\u00f3n adelante , cu\u00e1ntos cm quiero que se mueva hacia adelante) y dicha funci\u00f3n lo utilizar\u00e1 para que Rupertobot haga lo que yo quiero. \u00a1Bueno!. Pues en MasayloBlockly, retoma las funciones del ejemplo anterior. Vamos a modificar la funci\u00f3n adelante para que acepte argumentos. En la esquina superior izquierda del bloque que representa dicha funci\u00f3n, ver\u00e1s un icono azul en forma de engranaje. Si pinchas ah\u00ed, te ofrecer\u00e1 la posibilidad de usar variables (par\u00e1metros) Yo quiero introducir un argumento correspondiente a cu\u00e1ntos cm quiero que se mueva Rupertobot hacia adelante. Este n\u00famero va a aceptar decimales, as\u00ed que cambio la \"x\" que viene por defecto por el nombre \"cm\", y en el tipo, voy a especificar \"decimal de punto flotante\". Una vez lo haga, arrastra el bloque correspondiente a ese variable dentro del bloque \"argumentos de entrada\": Vuelve a pinchar en el engranaje, para que desaparezca el recuadro de configuraci\u00f3n y te deje m\u00e1s espacio en la pantalla. Si ahora buscas la funci\u00f3n adelante , ver\u00e1s que el bloque ha cambiado ligeramente: ahora la pieza de puzzle acepta un bloque lateral, que ser\u00e1 un n\u00famero del bloque Matem\u00e1ticas correspondiente al n\u00famero de cm que quiero avanzar. \u00a1Pero ojo!. A\u00fan no hemos terminado. Ya he preparado mi funci\u00f3n para que acepte argumentos, pero \u00bfc\u00f3mo la modifico para que realmente mi Rupertobot se mueva la distancia especificada?. Sencillo (para m\u00ed, claro, que soy m\u00e1s viejo que un bosque y llevo meses trabajando en el Ruperti; pero t\u00fa tambi\u00e9n lo vas a entender enseguida). En el bloque Repetir , que originalmente inclu\u00eda el n\u00famero 512 veces , vamos a introducir un bloque de Matem\u00e1ticas correspondiente a operaciones (inicialmente lleva el signo + , pero sustit\u00fayelo por una multiplicaci\u00f3n). En dicho bloque multiplicaremos, por un lado, la variable que hemos creado, cm (est\u00e1 disponible en el bloque Variables ; si no lo encuentras, vuelve a la configuraci\u00f3n de MasayloBlockly y act\u00edvalo desde el nivel Experto ), y por otro lado, el n\u00famero 20,3718. S\u00f3lo te queda poner el bloque que has creado en lugar del n\u00famero original, 512 . Ahora vamos a usar la funci\u00f3n modificada para hacer que Rupertobot avance 15 cm (la funci\u00f3n acepta tambi\u00e9n n\u00fameros enteros): Vuelca el programa en tu robot y, regla en mano, comprueba la distancia que realmente se mueve. Si no te acaba de convencer el resultado, recalcula t\u00fa y sustituye el n\u00famero 20,3718 . Pero yo creo que encontrar\u00e1s m\u00e1s que aceptable el movimiento final. Modificamos el resto de funciones Lo que queda por hacer es sencillo. Repite el proceso con atras , izquierda y derecha . atras puede (y deber\u00eda) utilizar la misma variable, cm , as\u00ed como el n\u00famero 20,7318 . En cuanto a izquierda y derecha , deber\u00edas especificar el argumento grados , tambi\u00e9n de tipo decimal de coma flotante, y recordando que el n\u00famero ahora ser\u00eda 2,8444 . Programa de prueba Haz alg\u00fan programa que te permita comprobar si las funciones trabajan como deber\u00edan. Yo te propongo este, por ejemplo. Al acabar, el robot deber\u00eda acabar exactamente en la misma posici\u00f3n que ha empezado: Programa tu Arduino Si quieres ver c\u00f3mo quedar\u00eda la nueva funci\u00f3n adelante en la IDE de Arduino, te dejo el c\u00f3digo en C++ con esta funci\u00f3n y c\u00f3mo se ejecutar\u00eda para avanzar 15 cm, tal y como especific\u00e1bamos en uno de los ejemplos anteriores (si quieres el resto de funciones, m\u00e1s abajo puedes descargarlas): void adelante(float cm) { for (int count=0 ; count<cm * 20.3718 ; count++) { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); } } void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { adelante(15); while(true); } Descarga los programas Ejemplo de las funciones con argumentos adelante, atr\u00e1s, izquierda y derecha para MasayloBlockly Ejemplo de las funciones con argumentos adelante, atr\u00e1s, izquierda y derecha para la IDE de Arduino","title":"Uso de funciones(II)"},{"location":"adelanteAtras2/#funciones-ii","text":"","title":"Funciones (II)"},{"location":"adelanteAtras2/#introduccion","text":"Si has le\u00eddo la secci\u00f3n anterior (es lo que uno supondr\u00eda m\u00e1s l\u00f3gico, pero cuando hablamos de estudiantes de Educaci\u00f3n Secundaria, nunca desecho ninguna hip\u00f3tesis), habr\u00e1s aprendido a crear funciones de modo que puedes repetir el c\u00f3digo varias veces, tantas como te limites a llamar a cada funci\u00f3n por su nombre. No obstante, tambi\u00e9n hemos explicado que con ese enfoque, cada vez que llamemos a la funci\u00f3n adelante , por ejemplo, Rupertobot siempre avanzar\u00e1 exactamente la misma distancia: 3,14 multiplicado por 80, es decir, 251,33 mm (m\u00e1s o menos). Esto es as\u00ed porque tal y como hemos construido la funci\u00f3n, \u00e9sta siempre se va a ejecutar exactamente del mismo modo, tal y como la hemos escrito. Lo ideal, ahora, ser\u00eda que pudi\u00e9ramos introducir un valor que permitiera a adelante repetir el bucle de su interior un n\u00famero de veces variable, seg\u00fan la distancia que queramos avanzar. Para ello, pasamos a explicar c\u00f3mo usar par\u00e1metros con nuestras funciones.","title":"Introducci\u00f3n"},{"location":"adelanteAtras2/#justificacion-matematica","text":"Lo que queremos hacer es usar funciones param\u00e9tricas en las que indiquemos en los casos de adelante y atras , cu\u00e1ntos cent\u00edmetros queremos movernos, y en el de izquierda y derecha , cu\u00e1ntos grados queremos girar. Tiremos, entonces, de nuestros conocimientos de geometr\u00eda: La funci\u00f3n adelante original genera un total de 2048 pasos hacia adelante, lo que corresponde a una revoluci\u00f3n completa en ambas ruedas del Rupertobot. Como el di\u00e1metro de dichas ruedas es alrededor de unos 80 mm (ya te he dicho que este dato var\u00eda seg\u00fan el grosor de las juntas t\u00f3ricas), conociendo la f\u00f3rmula de la longitud de una circunferencia, sabemos que eso equivaldr\u00eda a un avance de 251,33 mm, o mejor, 25,13 cm. Qu\u00e9date con el dato: 2048 pasos->25,13 cm. Lo que resta es una regla de tres (que me perdonen los profes de Matem\u00e1ticas, s\u00e9 que esto no est\u00e1 bien visto) sencilla: Si 25,13 cm exigen 2048 pasos, entonces avanzar 1 cm exigir\u00e1 2048/25,13=81,4873 pasos. Ten en cuenta que el algoritmo inicial de adelante aplica 4 pasos a cada repetici\u00f3n, as\u00ed que 81,4873/4=20,3718. \u00c9se es el n\u00famero de veces que tenemos que repetir este proceso por cada cm que queremos avanzar. Nota para tiquismiquis: si est\u00e1s comprobando mi explicaci\u00f3n calculadora en mano, puede que te baile alg\u00fan n\u00famero a la altura de mil\u00e9simas o diezmil\u00e9simas, no lo estoy comprobando. Los n\u00fameros que manejo los saco de mi propia calculadora sin usar redondeos. Si quieres cambiar algo, eres muy libre, es tu robot . Por otro lado, si has probado la funci\u00f3n izquierda o derecha , ver\u00e1s que como hacen avanzar una revoluci\u00f3n completa a cada rueda (2048 pasos), haremos que el robot gire sobre su eje 180\u00ba. \u00bfCu\u00e1ntos pasos necesito avanzar por grado sexagesimal, entonces?. La aritm\u00e9tica es sencilla, de nuevo. La funci\u00f3n original, que da 2048 pasos, implica un giro de 180\u00ba. As\u00ed que un s\u00f3lo grado corresponder\u00e1 a 2048/180=11,3778 pasos. Teniendo en cuenta que las funciones originales implican 4 pasos por repetici\u00f3n, el algoritmo original deber\u00eda repetirse 2.8444 veces por grado sexagesimal. Qu\u00e9date, pues, con esos dos n\u00fameros: 20,3718 y 2,8444 Lo que vamos a hacer a continuaci\u00f3n es modificar nuestras funciones para que acepten par\u00e1metros. Si has entendido el concepto de que una funci\u00f3n es un grupo de \u00f3rdenes asociadas a un nombre (por ejemplo, adelante ) que se ejecutan en orden cuando se llama a dicho nombre, entender\u00e1s ahora que las funciones pueden trabajar con par\u00e1metros. Un par\u00e1metro, o argumento, es un dato (de cualquier tipo, n\u00famero entero, decimal, l\u00f3gico... incluso se aceptan caracteres) que puedo dar yo a la funci\u00f3n para que lo utilice de alg\u00fan modo ( par\u00e1metros/argumentos de entrada ) o que puedo pedir a la funci\u00f3n que me devuelva despu\u00e9s de ejecutarse, como consecuencia de alg\u00fan c\u00e1lculo ( par\u00e1metros/argumentos de salida ). Lo s\u00e9, lo s\u00e9. Parece complicado. El movimiento se demuestra andando, as\u00ed que vamos con ello.","title":"Justificaci\u00f3n matem\u00e1tica"},{"location":"adelanteAtras2/#uso-de-funciones-con-argumentos","text":"En este caso, vamos a trabajar con argumentos de entrada . Esto significa que cuando yo ejecute una funci\u00f3n, primero tengo que proporcionarle un dato (en la funci\u00f3n adelante , cu\u00e1ntos cm quiero que se mueva hacia adelante) y dicha funci\u00f3n lo utilizar\u00e1 para que Rupertobot haga lo que yo quiero. \u00a1Bueno!. Pues en MasayloBlockly, retoma las funciones del ejemplo anterior. Vamos a modificar la funci\u00f3n adelante para que acepte argumentos. En la esquina superior izquierda del bloque que representa dicha funci\u00f3n, ver\u00e1s un icono azul en forma de engranaje. Si pinchas ah\u00ed, te ofrecer\u00e1 la posibilidad de usar variables (par\u00e1metros) Yo quiero introducir un argumento correspondiente a cu\u00e1ntos cm quiero que se mueva Rupertobot hacia adelante. Este n\u00famero va a aceptar decimales, as\u00ed que cambio la \"x\" que viene por defecto por el nombre \"cm\", y en el tipo, voy a especificar \"decimal de punto flotante\". Una vez lo haga, arrastra el bloque correspondiente a ese variable dentro del bloque \"argumentos de entrada\": Vuelve a pinchar en el engranaje, para que desaparezca el recuadro de configuraci\u00f3n y te deje m\u00e1s espacio en la pantalla. Si ahora buscas la funci\u00f3n adelante , ver\u00e1s que el bloque ha cambiado ligeramente: ahora la pieza de puzzle acepta un bloque lateral, que ser\u00e1 un n\u00famero del bloque Matem\u00e1ticas correspondiente al n\u00famero de cm que quiero avanzar. \u00a1Pero ojo!. A\u00fan no hemos terminado. Ya he preparado mi funci\u00f3n para que acepte argumentos, pero \u00bfc\u00f3mo la modifico para que realmente mi Rupertobot se mueva la distancia especificada?. Sencillo (para m\u00ed, claro, que soy m\u00e1s viejo que un bosque y llevo meses trabajando en el Ruperti; pero t\u00fa tambi\u00e9n lo vas a entender enseguida). En el bloque Repetir , que originalmente inclu\u00eda el n\u00famero 512 veces , vamos a introducir un bloque de Matem\u00e1ticas correspondiente a operaciones (inicialmente lleva el signo + , pero sustit\u00fayelo por una multiplicaci\u00f3n). En dicho bloque multiplicaremos, por un lado, la variable que hemos creado, cm (est\u00e1 disponible en el bloque Variables ; si no lo encuentras, vuelve a la configuraci\u00f3n de MasayloBlockly y act\u00edvalo desde el nivel Experto ), y por otro lado, el n\u00famero 20,3718. S\u00f3lo te queda poner el bloque que has creado en lugar del n\u00famero original, 512 . Ahora vamos a usar la funci\u00f3n modificada para hacer que Rupertobot avance 15 cm (la funci\u00f3n acepta tambi\u00e9n n\u00fameros enteros): Vuelca el programa en tu robot y, regla en mano, comprueba la distancia que realmente se mueve. Si no te acaba de convencer el resultado, recalcula t\u00fa y sustituye el n\u00famero 20,3718 . Pero yo creo que encontrar\u00e1s m\u00e1s que aceptable el movimiento final.","title":"Uso de funciones con argumentos"},{"location":"adelanteAtras2/#modificamos-el-resto-de-funciones","text":"Lo que queda por hacer es sencillo. Repite el proceso con atras , izquierda y derecha . atras puede (y deber\u00eda) utilizar la misma variable, cm , as\u00ed como el n\u00famero 20,7318 . En cuanto a izquierda y derecha , deber\u00edas especificar el argumento grados , tambi\u00e9n de tipo decimal de coma flotante, y recordando que el n\u00famero ahora ser\u00eda 2,8444 .","title":"Modificamos el resto de funciones"},{"location":"adelanteAtras2/#programa-de-prueba","text":"Haz alg\u00fan programa que te permita comprobar si las funciones trabajan como deber\u00edan. Yo te propongo este, por ejemplo. Al acabar, el robot deber\u00eda acabar exactamente en la misma posici\u00f3n que ha empezado:","title":"Programa de prueba"},{"location":"adelanteAtras2/#programa-tu-arduino","text":"Si quieres ver c\u00f3mo quedar\u00eda la nueva funci\u00f3n adelante en la IDE de Arduino, te dejo el c\u00f3digo en C++ con esta funci\u00f3n y c\u00f3mo se ejecutar\u00eda para avanzar 15 cm, tal y como especific\u00e1bamos en uno de los ejemplos anteriores (si quieres el resto de funciones, m\u00e1s abajo puedes descargarlas): void adelante(float cm) { for (int count=0 ; count<cm * 20.3718 ; count++) { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); } } void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { adelante(15); while(true); }","title":"Programa tu Arduino"},{"location":"adelanteAtras2/#descarga-los-programas","text":"Ejemplo de las funciones con argumentos adelante, atr\u00e1s, izquierda y derecha para MasayloBlockly Ejemplo de las funciones con argumentos adelante, atr\u00e1s, izquierda y derecha para la IDE de Arduino","title":"Descarga los programas"},{"location":"alimentacion/","text":"\u00bfQu\u00e9 portapilas usar? Como ya he comentado en las instrucciones de montaje, tu Rupertobot est\u00e1 dise\u00f1ado para que puedas usar un portapilas de 6 pilas AA en dos filas de 3, o si lo prefieres, puedes atornillar en las columnas interiores un portapilas de 5 pilas alineadas en fila. Incluso, dependiendo de tus posibilidades (pues no he hecho yo chapuzas ni n\u00e1 cuando no dispongo del material adecuado), puedes usar portapilas de s\u00f3lo 4 pilas. Eso s\u00ed, en ese caso, res\u00edgnate a que s\u00f3lo funcionen los motores, y quiz\u00e1s los sensores de infrarrojos para hacer un siguel\u00edneas. Desp\u00eddete de detectar distancias con el sensor de ultrasonidos. Interruptor En un principio, la plataforma superior est\u00e1 pensada para embutir un conmutador de los que usamos en las Aulas Taller de Tecnolog\u00eda, de tipo deslizante, de unos 15x7 mm de planta. Si tienes de otro tipo, siempre puedes tomar el archivo CAD de la plataforma superior y modificarlo para adaptarlo al tuyo. \u00bfC\u00f3mo alimento? No es dif\u00edcil. Espero que hayas tenido previsto soldar un par de cables primero a tu interruptor/conmutador, para facilitar el conexionado posterior. La idea es: polo positivo->Interruptor->Entraa Vin (no 5V) de Arduino/polo negativo->GND de Arduino (dicho mal y pronto). \u00bfY los motores? Yo estoy alimentando los drivers ULN2003 de los motores directamente desde la salida de 5 V de mi Arduino (yo suelo utilizar la Arduino Nano con su shield, que me da m\u00e1s juego, al contar con tantos pines de 5 V y GND). Con este conexionado, a m\u00ed el Rupertobot me va de miedo (vale, no es un velocista como Masaylo, ya lo hemos dicho varias veces; el caso es que funciona muy bien). Otra opci\u00f3n puede ser conectar ambos drivers al interruptor, de modo que en vez de darles la tensi\u00f3n de 5 V de Arduino, les llegue la de 9 V del portapilas. Yo a\u00fan no lo he probado, pero en teor\u00eda deber\u00edan funcionar igual e incluso mejor. Resumen La alimentaci\u00f3n el Rupertobot es muy simplona: la Arduino se alimenta, con el interruptor/conmutador por medio, del portapilas a trav\u00e9s de los pines Vin y GND. En cuanto a los driver ULN2003, puedes alimentarlos desde la tarjeta o directamente desde el portapilas. Dec\u00eddete por la soluci\u00f3n que m\u00e1s rabia te de.","title":"Alimentaci\u00f3n"},{"location":"alimentacion/#que-portapilas-usar","text":"Como ya he comentado en las instrucciones de montaje, tu Rupertobot est\u00e1 dise\u00f1ado para que puedas usar un portapilas de 6 pilas AA en dos filas de 3, o si lo prefieres, puedes atornillar en las columnas interiores un portapilas de 5 pilas alineadas en fila. Incluso, dependiendo de tus posibilidades (pues no he hecho yo chapuzas ni n\u00e1 cuando no dispongo del material adecuado), puedes usar portapilas de s\u00f3lo 4 pilas. Eso s\u00ed, en ese caso, res\u00edgnate a que s\u00f3lo funcionen los motores, y quiz\u00e1s los sensores de infrarrojos para hacer un siguel\u00edneas. Desp\u00eddete de detectar distancias con el sensor de ultrasonidos.","title":"\u00bfQu\u00e9 portapilas usar?"},{"location":"alimentacion/#interruptor","text":"En un principio, la plataforma superior est\u00e1 pensada para embutir un conmutador de los que usamos en las Aulas Taller de Tecnolog\u00eda, de tipo deslizante, de unos 15x7 mm de planta. Si tienes de otro tipo, siempre puedes tomar el archivo CAD de la plataforma superior y modificarlo para adaptarlo al tuyo.","title":"Interruptor"},{"location":"alimentacion/#como-alimento","text":"No es dif\u00edcil. Espero que hayas tenido previsto soldar un par de cables primero a tu interruptor/conmutador, para facilitar el conexionado posterior. La idea es: polo positivo->Interruptor->Entraa Vin (no 5V) de Arduino/polo negativo->GND de Arduino (dicho mal y pronto).","title":"\u00bfC\u00f3mo alimento?"},{"location":"alimentacion/#y-los-motores","text":"Yo estoy alimentando los drivers ULN2003 de los motores directamente desde la salida de 5 V de mi Arduino (yo suelo utilizar la Arduino Nano con su shield, que me da m\u00e1s juego, al contar con tantos pines de 5 V y GND). Con este conexionado, a m\u00ed el Rupertobot me va de miedo (vale, no es un velocista como Masaylo, ya lo hemos dicho varias veces; el caso es que funciona muy bien). Otra opci\u00f3n puede ser conectar ambos drivers al interruptor, de modo que en vez de darles la tensi\u00f3n de 5 V de Arduino, les llegue la de 9 V del portapilas. Yo a\u00fan no lo he probado, pero en teor\u00eda deber\u00edan funcionar igual e incluso mejor.","title":"\u00bfY los motores?"},{"location":"alimentacion/#resumen","text":"La alimentaci\u00f3n el Rupertobot es muy simplona: la Arduino se alimenta, con el interruptor/conmutador por medio, del portapilas a trav\u00e9s de los pines Vin y GND. En cuanto a los driver ULN2003, puedes alimentarlos desde la tarjeta o directamente desde el portapilas. Dec\u00eddete por la soluci\u00f3n que m\u00e1s rabia te de.","title":"Resumen"},{"location":"atras/","text":"Movimiento hacia atr\u00e1s Introducci\u00f3n En realidad, hago esta secci\u00f3n por verg\u00fcenza torera, pero si has hecho el ejercicio de mover hacia adelante tu Rupertobot , esta secci\u00f3n no deber\u00eda hacerte falta. Atr\u00e1s Ahora toca activar los pines 5->4->3->2 en este orden para el motor derecho, y al mismo tiempo excitaremos 6->7->8->9 para el motor izquierdo: Programa en MasayloBlockly Aqu\u00ed te lo dejo: ## Programa tu Arduino Si prefieres tirar del IDE de Arduino, el c\u00f3digo b\u00e1sico ser\u00eda: void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); } Descarga el programa Hacia atr\u00e1s, programa para MasayloBlockly Hacia atr\u00e1s, programa para IDE de Arduino","title":"Hacia atras"},{"location":"atras/#movimiento-hacia-atras","text":"","title":"Movimiento  hacia atr\u00e1s"},{"location":"atras/#introduccion","text":"En realidad, hago esta secci\u00f3n por verg\u00fcenza torera, pero si has hecho el ejercicio de mover hacia adelante tu Rupertobot , esta secci\u00f3n no deber\u00eda hacerte falta.","title":"Introducci\u00f3n"},{"location":"atras/#atras","text":"Ahora toca activar los pines 5->4->3->2 en este orden para el motor derecho, y al mismo tiempo excitaremos 6->7->8->9 para el motor izquierdo:","title":"Atr\u00e1s"},{"location":"atras/#programa-en-masayloblockly","text":"Aqu\u00ed te lo dejo: ## Programa tu Arduino Si prefieres tirar del IDE de Arduino, el c\u00f3digo b\u00e1sico ser\u00eda: void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); }","title":"Programa en MasayloBlockly"},{"location":"atras/#descarga-el-programa","text":"Hacia atr\u00e1s, programa para MasayloBlockly Hacia atr\u00e1s, programa para IDE de Arduino","title":"Descarga el programa"},{"location":"conexionadoSensores/","text":"Conexionado de sensores de infrarrojos y ultrasonidos Estos sensores son muy sencillitos de instalar. Como ver\u00e1s, atacaremos, por un lado, su alimentaci\u00f3n, y por otro lado, los pines digitales que comunicar\u00e1n a la Arduino los cambios en el entorno que se detecten. Empecemos, pues. Sensor de ultrasonidos (Extra\u00eddo del primer manual del robot Masaylo): Detecci\u00f3n de distancias por ultrasonidos Como casi todos los otros campos de conocimientos tratados a lo largo de este texto relacionados con la Rob\u00f3tica Educativa, existe ya una extensa bibliograf\u00eda en la red sobre el uso de m\u00f3dulos como el HC-SR04 o el PING de Parallax en la red. El principio b\u00e1sico de cualquier sensor de ultrasonidos es muy sencillo: Un circuito emisor, com\u00fanmente denominado \u201cTrigger\u201d, lanza un pulso de ultrasonidos (para ello, Arduino debe emitir un \u201c1\u201d en la patilla correspondiente). Un temporizador se pone a 0 y empieza a contar. Un circuito receptor, de nombre com\u00fan \u201cEcho\u201d, detecta el ultrasonido que ha rebotado (siempre que haya obst\u00e1culo) y env\u00eda un \u201c1\u201d l\u00f3gico a una patilla de Arduino (puede ser o no la misma que hemos conectado al emisor, dependiendo del modelo). Detectado el \u201c1\u201d l\u00f3gico en el pin conectado a \u201cEcho\u201d el temporizador se para. Conocida la velocidad del sonido (unos 343 m/sg), y que el sonido ha tenido que recorrer el espacio hasta el obst\u00e1culo dos veces, ida y vuelta, se realiza el c\u00e1lculo correspondiente. En recorrer 1 cm, el tiempo que tarda el sonido es 0,000029155 sg. Teniendo en cuenta que la distancia es doble, un obst\u00e1culo localizado a 1 cm del sensor tardar\u00eda en detectarse 0,000058309 sg, es decir, 58,309 microsegundos, valor que utilizaremos para convertir el tiempo medido en distancia en cm. \u00a1Pero de eso nos preocuparemos m\u00e1s tarde!. El caso es que nosotros estamos utilizando el sensor HCSR04, que tiene a la saz\u00f3n cuatro pines (la imagen est\u00e1 extra\u00edda de Wikipedia): Vcc y GND para la alimentaci\u00f3n del sensor. Su conexi\u00f3n parece evidente. Un pin, TRIG, que es el que emitir\u00e1 un pulso cuando se le de un \"1\" l\u00f3gico. Un pin, ECHO, que es el que enviar\u00e1 a la Arduino un \"1\" cuando detecte el pulso si \u00e9ste encuentra un obst\u00e1culo y se ve rebotado de regreso. CONEXI\u00d3N DEL HCSR04 PATILLA DEL SENSOR PIN DE ARDUINO Vcc 5V Trig 10 Echo 11 GND GND Por supuesto, las patillas Trig y Echo puedes conectarlas a cualquier otro pin digital que te haya quedado libre (salvo el 0 y el 1, que no deben usarse por que son los pines que utiliza Arduino para comunicarse con tu ordenador mediante el puerto serie). En mi caso, utilizar\u00e9 este conexionado para los ejemplos que ir\u00e9 desarrollando, por una mera cuesti\u00f3n de llevar un cierto orden. Sensores de infrarrojos (Extra\u00eddo de mi primer libro sobre Masaylo): Un sensor de infrarrojos participa del mismo principio funcional que uno de ultrasonidos: se alimenta un diodo LED infrarrojo para que emita un pulso de luz,detectable por un fototransistor, en caso de haber rebotado en alg\u00fan obst\u00e1culo. No obstante, este tipo de sensores presenta caracter\u00edsticas propias que lo distingue de un sensor de ultrasonidos: Ventajas Son sensiblemente m\u00e1s baratos Disponen de un potenci\u00f3metro que permite ajustar la sensibilidad del sensor La emisi\u00f3n de la luz infrarroja es continua, no se necesita pin de control. As\u00ed que s\u00f3lo hacen falta tres conexiones: V, GND y OUT (pin de se\u00f1al). Son m\u00e1s f\u00e1ciles de instalar y de manejo m\u00e1s simple por parte del sistema de control. Pueden detectar cambios, si no de color, s\u00ed de luminosidad en la superficie sobre la que apuntan, lo que les hace ideales para el dise\u00f1o de robot siguel\u00edneas Desventajas Su rango de detecci\u00f3n es sensiblemente m\u00e1s bajo que en el caso de los ultrasonidos. Raramente superan los 30 cm, en el mejor de los casos, en el FC-51 Su sensibilidad es muy vulnerable a los cambios de luz en la estancia en la que se encuentre el robot, lo que obliga a continuos reajustes mediante el potenci\u00f3metro anexo. En ocasiones es recomendable rodear el par formado por el LED y el fototransistor por alg\u00fan tipo de capuch\u00f3n improvisado con cinta o cart\u00f3n que reduzca al m\u00e1ximo el ruido ocasionado por dichos cambios de luz. Nosotros utilizaremos estos sensores de infrarrojos, concretamente el modelo FC-51 (es el m\u00e1s popular, pero t\u00fa puedes montar el que te parezca), a derecha e izquierda del Rupertobot, a modo de detectores blanco/negro. Con ello, podremos programar al robot como siguel\u00edneas negras en campo blanco, o al rev\u00e9s, ya que cada sensor enviar\u00e1 un \"1\" ( veo blanco ) o un \"0\" ( veo negro ), y el programa podr\u00e1 saber si se est\u00e1 saliendo del camino por la derecha o por la izquierda. Cada sensor tiene tres pines: Vcc y GND para alimentaci\u00f3n, y OUT, que es el que dar\u00e1 un \"1\" o un \"0\" seg\u00fan lo que se encuentre: CONEXI\u00d3N DEL SENSOR DERECHO PATILLA DEL SENSOR PIN DE ARDUINO Vcc 5V OUT A0 (tambi\u00e9n se identifica como 14) GND GND CONEXI\u00d3N DEL SENSOR IZQUIERDO PATILLA DEL SENSOR PIN DE ARDUINO Vcc 5V OUT A1 (tambi\u00e9n se identifica como 15) GND GND De nuevo, eres muy libre de cambiar el patillaje. Yo prefiero esta elecci\u00f3n porque me reservo la patilla 12 para el zumbador (si la conecto al 13, sonar\u00eda de modo muy molesto al cargar los programas desde el ordenador), y me gusta que estos dos sensores vayan juntos. Resumen Usando s\u00f3lo tres pines de nuestra querid\u00edsima Arduino, podemos dotar al Rupertobot de dos capacidades muy \u00fatiles: detectar obst\u00e1culos, cuya distancia puede medir, y detectar niveles de color (claro/oscuro) en el suelo que pisa. Con ello, podremos programarlo como salvaobst\u00e1culos, siguel\u00edneas, resuelvelaberintos, y otro mont\u00f3n de palabras complejas muy chulas de usar. A medida que vayas familiariz\u00e1ndote con su programaci\u00f3n, disfrutar\u00e1s mucho de este peque\u00f1uelo.","title":"Sensores US e IR"},{"location":"conexionadoSensores/#conexionado-de-sensores-de-infrarrojos-y-ultrasonidos","text":"Estos sensores son muy sencillitos de instalar. Como ver\u00e1s, atacaremos, por un lado, su alimentaci\u00f3n, y por otro lado, los pines digitales que comunicar\u00e1n a la Arduino los cambios en el entorno que se detecten. Empecemos, pues.","title":"Conexionado de sensores de infrarrojos y ultrasonidos"},{"location":"conexionadoSensores/#sensor-de-ultrasonidos","text":"(Extra\u00eddo del primer manual del robot Masaylo): Detecci\u00f3n de distancias por ultrasonidos Como casi todos los otros campos de conocimientos tratados a lo largo de este texto relacionados con la Rob\u00f3tica Educativa, existe ya una extensa bibliograf\u00eda en la red sobre el uso de m\u00f3dulos como el HC-SR04 o el PING de Parallax en la red. El principio b\u00e1sico de cualquier sensor de ultrasonidos es muy sencillo: Un circuito emisor, com\u00fanmente denominado \u201cTrigger\u201d, lanza un pulso de ultrasonidos (para ello, Arduino debe emitir un \u201c1\u201d en la patilla correspondiente). Un temporizador se pone a 0 y empieza a contar. Un circuito receptor, de nombre com\u00fan \u201cEcho\u201d, detecta el ultrasonido que ha rebotado (siempre que haya obst\u00e1culo) y env\u00eda un \u201c1\u201d l\u00f3gico a una patilla de Arduino (puede ser o no la misma que hemos conectado al emisor, dependiendo del modelo). Detectado el \u201c1\u201d l\u00f3gico en el pin conectado a \u201cEcho\u201d el temporizador se para. Conocida la velocidad del sonido (unos 343 m/sg), y que el sonido ha tenido que recorrer el espacio hasta el obst\u00e1culo dos veces, ida y vuelta, se realiza el c\u00e1lculo correspondiente. En recorrer 1 cm, el tiempo que tarda el sonido es 0,000029155 sg. Teniendo en cuenta que la distancia es doble, un obst\u00e1culo localizado a 1 cm del sensor tardar\u00eda en detectarse 0,000058309 sg, es decir, 58,309 microsegundos, valor que utilizaremos para convertir el tiempo medido en distancia en cm. \u00a1Pero de eso nos preocuparemos m\u00e1s tarde!. El caso es que nosotros estamos utilizando el sensor HCSR04, que tiene a la saz\u00f3n cuatro pines (la imagen est\u00e1 extra\u00edda de Wikipedia): Vcc y GND para la alimentaci\u00f3n del sensor. Su conexi\u00f3n parece evidente. Un pin, TRIG, que es el que emitir\u00e1 un pulso cuando se le de un \"1\" l\u00f3gico. Un pin, ECHO, que es el que enviar\u00e1 a la Arduino un \"1\" cuando detecte el pulso si \u00e9ste encuentra un obst\u00e1culo y se ve rebotado de regreso. CONEXI\u00d3N DEL HCSR04 PATILLA DEL SENSOR PIN DE ARDUINO Vcc 5V Trig 10 Echo 11 GND GND Por supuesto, las patillas Trig y Echo puedes conectarlas a cualquier otro pin digital que te haya quedado libre (salvo el 0 y el 1, que no deben usarse por que son los pines que utiliza Arduino para comunicarse con tu ordenador mediante el puerto serie). En mi caso, utilizar\u00e9 este conexionado para los ejemplos que ir\u00e9 desarrollando, por una mera cuesti\u00f3n de llevar un cierto orden.","title":"Sensor de ultrasonidos"},{"location":"conexionadoSensores/#sensores-de-infrarrojos","text":"(Extra\u00eddo de mi primer libro sobre Masaylo): Un sensor de infrarrojos participa del mismo principio funcional que uno de ultrasonidos: se alimenta un diodo LED infrarrojo para que emita un pulso de luz,detectable por un fototransistor, en caso de haber rebotado en alg\u00fan obst\u00e1culo. No obstante, este tipo de sensores presenta caracter\u00edsticas propias que lo distingue de un sensor de ultrasonidos: Ventajas Son sensiblemente m\u00e1s baratos Disponen de un potenci\u00f3metro que permite ajustar la sensibilidad del sensor La emisi\u00f3n de la luz infrarroja es continua, no se necesita pin de control. As\u00ed que s\u00f3lo hacen falta tres conexiones: V, GND y OUT (pin de se\u00f1al). Son m\u00e1s f\u00e1ciles de instalar y de manejo m\u00e1s simple por parte del sistema de control. Pueden detectar cambios, si no de color, s\u00ed de luminosidad en la superficie sobre la que apuntan, lo que les hace ideales para el dise\u00f1o de robot siguel\u00edneas Desventajas Su rango de detecci\u00f3n es sensiblemente m\u00e1s bajo que en el caso de los ultrasonidos. Raramente superan los 30 cm, en el mejor de los casos, en el FC-51 Su sensibilidad es muy vulnerable a los cambios de luz en la estancia en la que se encuentre el robot, lo que obliga a continuos reajustes mediante el potenci\u00f3metro anexo. En ocasiones es recomendable rodear el par formado por el LED y el fototransistor por alg\u00fan tipo de capuch\u00f3n improvisado con cinta o cart\u00f3n que reduzca al m\u00e1ximo el ruido ocasionado por dichos cambios de luz. Nosotros utilizaremos estos sensores de infrarrojos, concretamente el modelo FC-51 (es el m\u00e1s popular, pero t\u00fa puedes montar el que te parezca), a derecha e izquierda del Rupertobot, a modo de detectores blanco/negro. Con ello, podremos programar al robot como siguel\u00edneas negras en campo blanco, o al rev\u00e9s, ya que cada sensor enviar\u00e1 un \"1\" ( veo blanco ) o un \"0\" ( veo negro ), y el programa podr\u00e1 saber si se est\u00e1 saliendo del camino por la derecha o por la izquierda. Cada sensor tiene tres pines: Vcc y GND para alimentaci\u00f3n, y OUT, que es el que dar\u00e1 un \"1\" o un \"0\" seg\u00fan lo que se encuentre: CONEXI\u00d3N DEL SENSOR DERECHO PATILLA DEL SENSOR PIN DE ARDUINO Vcc 5V OUT A0 (tambi\u00e9n se identifica como 14) GND GND CONEXI\u00d3N DEL SENSOR IZQUIERDO PATILLA DEL SENSOR PIN DE ARDUINO Vcc 5V OUT A1 (tambi\u00e9n se identifica como 15) GND GND De nuevo, eres muy libre de cambiar el patillaje. Yo prefiero esta elecci\u00f3n porque me reservo la patilla 12 para el zumbador (si la conecto al 13, sonar\u00eda de modo muy molesto al cargar los programas desde el ordenador), y me gusta que estos dos sensores vayan juntos.","title":"Sensores de infrarrojos"},{"location":"conexionadoSensores/#resumen","text":"Usando s\u00f3lo tres pines de nuestra querid\u00edsima Arduino, podemos dotar al Rupertobot de dos capacidades muy \u00fatiles: detectar obst\u00e1culos, cuya distancia puede medir, y detectar niveles de color (claro/oscuro) en el suelo que pisa. Con ello, podremos programarlo como salvaobst\u00e1culos, siguel\u00edneas, resuelvelaberintos, y otro mont\u00f3n de palabras complejas muy chulas de usar. A medida que vayas familiariz\u00e1ndote con su programaci\u00f3n, disfrutar\u00e1s mucho de este peque\u00f1uelo.","title":"Resumen"},{"location":"conexionadoStepper/","text":"Conexionado steppers Principio de funcionamiento Los motores paso a paso, steppers en su acepci\u00f3n m\u00e1s vulgar y anglosajona, se caracterizan por incorporar 4 bobinas a las que hay que ir excitando en el orden correcto. (La ilustraci\u00f3n que sigue pertenece a la Wikipedia, generada por el usuario Teravolt). Los motores que usamos son los 28BYJ-48, uno de los modelos m\u00e1s populares en el mundo maker. De potencia y velocidad no matan, pero para los objetivos educativos de Rupertobot tenemos hardware de sobra. Como dec\u00eda, este modelo gira cada vez que excitamos una de sus bobinas ( dar un paso ) un total de unos 11.25 grados sexagesimales (lo que implica dar 32 pasos para lograr una vuelta completa). Por a\u00f1adidura, el 28BYJ-48 incorpora un mecanismo reductor de 1/64, lo que vuelve a reducir 64 veces su avance, multiplicando por el mismo n\u00famero, por lo tanto, su par motor. En total, estos motores precisan un total de 32*64=2048 pasos (repito, esto significa ir excitando cada una de sus cuatro bobinas en el orden adecuado) para dar una vuelta completa. Esto significa que cada paso implica un avance de 0.18\u00ba, lo que tendr\u00e9is que aceptar que supone una precisi\u00f3n exquisita en un modelo tan baratito. Esto atendiendo a los datasheet de este stepper... Pero, seg\u00fan mi experiencia, al final cada motor tiene sus propias caracter\u00edsticas, seg\u00fan donde lo hayas comprado (yo me he encontrado motores con una relaci\u00f3n de transmisi\u00f3n mucho m\u00e1s peque\u00f1a que han hecho salir disparado a mi escornabot, por ejemplo). Vamos, que al final tendr\u00e1s que experimentar para encontrar el n\u00famero adecuado. Conexionado Vamos a conectar las bobinas de los motores de la siguiente manera: Motor derecho ENTRADA DRIVER COLOR DE CABLE PIN DE ARDUINO IN1 Azul 5 IN2 Rosa 4 IN3 Amarillo 3 IN4 Naranja 2 Motor izquierdo ENTRADA DRIVER COLOR DE CABLE PIN DE ARDUINO IN1 Azul 6 IN2 Rosa 7 IN3 Amarillo 8 IN4 Naranja 9 SPOILER Como ya te dije, nunca acabo de estar seguro del orden de conexi\u00f3n de los pines en los ULN2003. Normalmente, a m\u00ed me funciona as\u00ed. No obstante, en cuanto empieces con tus primeras pruebas, si alguno de los motores funciona al rev\u00e9s, lo \u00fanico que tienes que hacer es invertir el orden de estos cuatro cables. S\u00f3lo aseg\u00farate de que los conectas en orden, seguidos (y a los mismos pines, s\u00f3lo que al rev\u00e9s, claro). Aqu\u00ed te dejo el esquema de conexi\u00f3n (repito, el que a m\u00ed me funciona en un principio): Ojo a la alimentaci\u00f3n Por razones de simplicidad, en el esquema anterior no he a\u00f1adido la alimentaci\u00f3n de ambos driver, que te he explicado en el apartado de Alimentaci\u00f3n . Pero tienes que alimentar ambos circuitos, como ya te he explicado, conectando las patillas marcadas con los signos - y + a la Arduino o al portapilas . De lo contrario, los motores no se mover\u00e1n.","title":"Motores paso a paso (stepper)"},{"location":"conexionadoStepper/#conexionado-steppers","text":"","title":"Conexionado steppers"},{"location":"conexionadoStepper/#principio-de-funcionamiento","text":"Los motores paso a paso, steppers en su acepci\u00f3n m\u00e1s vulgar y anglosajona, se caracterizan por incorporar 4 bobinas a las que hay que ir excitando en el orden correcto. (La ilustraci\u00f3n que sigue pertenece a la Wikipedia, generada por el usuario Teravolt). Los motores que usamos son los 28BYJ-48, uno de los modelos m\u00e1s populares en el mundo maker. De potencia y velocidad no matan, pero para los objetivos educativos de Rupertobot tenemos hardware de sobra. Como dec\u00eda, este modelo gira cada vez que excitamos una de sus bobinas ( dar un paso ) un total de unos 11.25 grados sexagesimales (lo que implica dar 32 pasos para lograr una vuelta completa). Por a\u00f1adidura, el 28BYJ-48 incorpora un mecanismo reductor de 1/64, lo que vuelve a reducir 64 veces su avance, multiplicando por el mismo n\u00famero, por lo tanto, su par motor. En total, estos motores precisan un total de 32*64=2048 pasos (repito, esto significa ir excitando cada una de sus cuatro bobinas en el orden adecuado) para dar una vuelta completa. Esto significa que cada paso implica un avance de 0.18\u00ba, lo que tendr\u00e9is que aceptar que supone una precisi\u00f3n exquisita en un modelo tan baratito. Esto atendiendo a los datasheet de este stepper... Pero, seg\u00fan mi experiencia, al final cada motor tiene sus propias caracter\u00edsticas, seg\u00fan donde lo hayas comprado (yo me he encontrado motores con una relaci\u00f3n de transmisi\u00f3n mucho m\u00e1s peque\u00f1a que han hecho salir disparado a mi escornabot, por ejemplo). Vamos, que al final tendr\u00e1s que experimentar para encontrar el n\u00famero adecuado.","title":"Principio de funcionamiento"},{"location":"conexionadoStepper/#conexionado","text":"Vamos a conectar las bobinas de los motores de la siguiente manera: Motor derecho ENTRADA DRIVER COLOR DE CABLE PIN DE ARDUINO IN1 Azul 5 IN2 Rosa 4 IN3 Amarillo 3 IN4 Naranja 2 Motor izquierdo ENTRADA DRIVER COLOR DE CABLE PIN DE ARDUINO IN1 Azul 6 IN2 Rosa 7 IN3 Amarillo 8 IN4 Naranja 9 SPOILER Como ya te dije, nunca acabo de estar seguro del orden de conexi\u00f3n de los pines en los ULN2003. Normalmente, a m\u00ed me funciona as\u00ed. No obstante, en cuanto empieces con tus primeras pruebas, si alguno de los motores funciona al rev\u00e9s, lo \u00fanico que tienes que hacer es invertir el orden de estos cuatro cables. S\u00f3lo aseg\u00farate de que los conectas en orden, seguidos (y a los mismos pines, s\u00f3lo que al rev\u00e9s, claro). Aqu\u00ed te dejo el esquema de conexi\u00f3n (repito, el que a m\u00ed me funciona en un principio):","title":"Conexionado"},{"location":"conexionadoStepper/#ojo-a-la-alimentacion","text":"Por razones de simplicidad, en el esquema anterior no he a\u00f1adido la alimentaci\u00f3n de ambos driver, que te he explicado en el apartado de Alimentaci\u00f3n . Pero tienes que alimentar ambos circuitos, como ya te he explicado, conectando las patillas marcadas con los signos - y + a la Arduino o al portapilas . De lo contrario, los motores no se mover\u00e1n.","title":"Ojo a la alimentaci\u00f3n"},{"location":"conexionadoZumbador/","text":"Conexionado del piezoel\u00e9ctrico o zumbador Principio f\u00edsico del piezoel\u00e9ctrico Si acudes a fuentes fiables (al menos, bastante m\u00e1s fiables que este humilde sitio), aprender\u00e1s que lo que aqu\u00ed llamo zumbador es un dispositivo que puede emitir sonidos, normalmente bas\u00e1ndose en el efecto piezoel\u00e9ctrico . Seg\u00fan este efecto (as\u00ed, a grandes rasgos), hay materiales que, sometidos a una tensi\u00f3n el\u00e9ctrica, se deforman y emiten un peque\u00f1o chasquido. De hecho, si conectas directamente este dispositivo a los pines 5V y GND de Arduino, en algunos casos emitir\u00e1 directamente un sonido, chirriante, irritante, continuo. En ese caso, el zumbador que tienes es de tipo activo . Si queda en silencio, es de tipo pasivo . No te preocupes, igualmente podr\u00e1s hacer que suene. El caso es que, si conectas el polo positivo de tu zumbador (normalmente, tiene la patilla m\u00e1s larga, y adem\u00e1s tiene por encima el s\u00edmbolo +) a un pin de Arduino podr\u00e1s reproducir distintos tonos. \u00bfC\u00f3mo?. Sencillo. Arduino puede encender y apagar el pin elegido muy r\u00e1pidamente, a la frecuencia que desees. Si, por ejemplo, programas la tarjeta para que env\u00ede \"1\" y \"0\" alternativamente a dicho pin cada cierto tiempo, pongamos 2 milisegundos, har\u00e1s que el piezoel\u00e9ctrico se deforme 500 veces por segundo, emitiendo el mencionado chasquido cada vez. Eso har\u00e1 que oigas un tono de 500 hertzios. Si quieres, por ejemplo, o\u00edr un tono m\u00e1s agudo, cambia la frecuencia de conexi\u00f3n/desconexi\u00f3n a 1 milisegundo. Ahora, el sonido emitido ser\u00e1 de 1000 hertzios. Sencillo, \u00bfverdad?. Conexionado Esta vez est\u00e1 chupado, \u00bfno?. La patilla corta, a GND, y la larga, a un pin de Arduino. Yo me quedo con la 12. CONEXI\u00d3N DEL BUZZER/ZUMBADOR PATILLA DEL SENSOR PIN DE ARDUINO + 12 - GND Resumen Un zumbador no tiene una gran utilidad t\u00e9cnica, pero siempre da vidilla. Adem\u00e1s, pienso ense\u00f1arte a hacerle gorgear como R2-D2, que hasta tengo una pieza en MasayloBlockly para eso con el robot Masaylo. Pero bueno, ya lo iremos viendo. \u00a1Que la fuerza te acompa\u00f1e!","title":"Zumbador"},{"location":"conexionadoZumbador/#conexionado-del-piezoelectrico-o-zumbador","text":"","title":"Conexionado del piezoel\u00e9ctrico o zumbador"},{"location":"conexionadoZumbador/#principio-fisico-del-piezoelectrico","text":"Si acudes a fuentes fiables (al menos, bastante m\u00e1s fiables que este humilde sitio), aprender\u00e1s que lo que aqu\u00ed llamo zumbador es un dispositivo que puede emitir sonidos, normalmente bas\u00e1ndose en el efecto piezoel\u00e9ctrico . Seg\u00fan este efecto (as\u00ed, a grandes rasgos), hay materiales que, sometidos a una tensi\u00f3n el\u00e9ctrica, se deforman y emiten un peque\u00f1o chasquido. De hecho, si conectas directamente este dispositivo a los pines 5V y GND de Arduino, en algunos casos emitir\u00e1 directamente un sonido, chirriante, irritante, continuo. En ese caso, el zumbador que tienes es de tipo activo . Si queda en silencio, es de tipo pasivo . No te preocupes, igualmente podr\u00e1s hacer que suene. El caso es que, si conectas el polo positivo de tu zumbador (normalmente, tiene la patilla m\u00e1s larga, y adem\u00e1s tiene por encima el s\u00edmbolo +) a un pin de Arduino podr\u00e1s reproducir distintos tonos. \u00bfC\u00f3mo?. Sencillo. Arduino puede encender y apagar el pin elegido muy r\u00e1pidamente, a la frecuencia que desees. Si, por ejemplo, programas la tarjeta para que env\u00ede \"1\" y \"0\" alternativamente a dicho pin cada cierto tiempo, pongamos 2 milisegundos, har\u00e1s que el piezoel\u00e9ctrico se deforme 500 veces por segundo, emitiendo el mencionado chasquido cada vez. Eso har\u00e1 que oigas un tono de 500 hertzios. Si quieres, por ejemplo, o\u00edr un tono m\u00e1s agudo, cambia la frecuencia de conexi\u00f3n/desconexi\u00f3n a 1 milisegundo. Ahora, el sonido emitido ser\u00e1 de 1000 hertzios. Sencillo, \u00bfverdad?.","title":"Principio f\u00edsico del piezoel\u00e9ctrico"},{"location":"conexionadoZumbador/#conexionado","text":"Esta vez est\u00e1 chupado, \u00bfno?. La patilla corta, a GND, y la larga, a un pin de Arduino. Yo me quedo con la 12. CONEXI\u00d3N DEL BUZZER/ZUMBADOR PATILLA DEL SENSOR PIN DE ARDUINO + 12 - GND","title":"Conexionado"},{"location":"conexionadoZumbador/#resumen","text":"Un zumbador no tiene una gran utilidad t\u00e9cnica, pero siempre da vidilla. Adem\u00e1s, pienso ense\u00f1arte a hacerle gorgear como R2-D2, que hasta tengo una pieza en MasayloBlockly para eso con el robot Masaylo. Pero bueno, ya lo iremos viendo. \u00a1Que la fuerza te acompa\u00f1e!","title":"Resumen"},{"location":"izquierdaDerecha/","text":"Como hacer giros Introducci\u00f3n Entendiendo que vayas siguiendo los ejemplos que te pongo por orden, es de suponer que ya estar\u00e1s deduciendo c\u00f3mo hacer que gire. A grandes rasgos, me vienen a la mente dos modos de giro en este robot: - Hacer girar hacia adelante la rueda contraria al giro que queremos, y dejar parada la rueda de nuestro lado (Si giro a izquierda, la rueda derecha va hacia adelante, y la izquierda se para). - O podemos hacer girar hacia adelante la rueda contraria al giro que queremos, y para aumentar par y velocidad, giramos hacia atr\u00e1s la rueda del mismo lado hacia donde queremos girar . Giro a derecha Giro a izquierda Eso significa que, para girar hacia la derecha, el motor izquierdo debe girar en sentido antihorario y el derecho en sentido horario, mientras que para girar hacia la izquierda, habr\u00e1 que hacerlo al rev\u00e9s. Programas en MasayloBlockly A continuaci\u00f3n te presento los programas para ambos tipos de giro: GIRO A DERECHA GIRO A IZQUIERDA 5->4->3->2 2->3->4->5 9->8->7->6 6->7->8->9 Programa tu Arduino Te dejo tambi\u00e9n los c\u00f3digos: C\u00d3DIGO PARA GIRAR A IZQUIERDA EN ARDUINO void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); } C\u00d3DIGO PARA GIRAR A DERECHA EN ARDUINO void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); } Descarga los programas Giro a derecha, programa para MasayloBlockly Giro a izquierda, programa para MasayloBlockly Giro a derecha, programa para IDE de Arduino Giro a izquierda, programa para IDE de Arduino","title":"C\u00f3mo girar"},{"location":"izquierdaDerecha/#como-hacer-giros","text":"","title":"Como hacer giros"},{"location":"izquierdaDerecha/#introduccion","text":"Entendiendo que vayas siguiendo los ejemplos que te pongo por orden, es de suponer que ya estar\u00e1s deduciendo c\u00f3mo hacer que gire. A grandes rasgos, me vienen a la mente dos modos de giro en este robot: - Hacer girar hacia adelante la rueda contraria al giro que queremos, y dejar parada la rueda de nuestro lado (Si giro a izquierda, la rueda derecha va hacia adelante, y la izquierda se para). - O podemos hacer girar hacia adelante la rueda contraria al giro que queremos, y para aumentar par y velocidad, giramos hacia atr\u00e1s la rueda del mismo lado hacia donde queremos girar . Giro a derecha Giro a izquierda Eso significa que, para girar hacia la derecha, el motor izquierdo debe girar en sentido antihorario y el derecho en sentido horario, mientras que para girar hacia la izquierda, habr\u00e1 que hacerlo al rev\u00e9s.","title":"Introducci\u00f3n"},{"location":"izquierdaDerecha/#programas-en-masayloblockly","text":"A continuaci\u00f3n te presento los programas para ambos tipos de giro: GIRO A DERECHA GIRO A IZQUIERDA 5->4->3->2 2->3->4->5 9->8->7->6 6->7->8->9","title":"Programas en MasayloBlockly"},{"location":"izquierdaDerecha/#programa-tu-arduino","text":"Te dejo tambi\u00e9n los c\u00f3digos: C\u00d3DIGO PARA GIRAR A IZQUIERDA EN ARDUINO void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); } C\u00d3DIGO PARA GIRAR A DERECHA EN ARDUINO void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); pinMode(6, OUTPUT); pinMode(7, OUTPUT); pinMode(8, OUTPUT); pinMode(9, OUTPUT); } void loop() { digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, HIGH); delay(2); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, LOW); digitalWrite(8, HIGH); digitalWrite(9, LOW); delay(2); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, LOW); digitalWrite(7, HIGH); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); digitalWrite(6, HIGH); digitalWrite(7, LOW); digitalWrite(8, LOW); digitalWrite(9, LOW); delay(2); }","title":"Programa tu Arduino"},{"location":"izquierdaDerecha/#descarga-los-programas","text":"Giro a derecha, programa para MasayloBlockly Giro a izquierda, programa para MasayloBlockly Giro a derecha, programa para IDE de Arduino Giro a izquierda, programa para IDE de Arduino","title":"Descarga los programas"},{"location":"montaje/","text":"Introducci\u00f3n A lo largo de este documento (que intentar\u00e9 ir haciendo m\u00e1s extensivo y claro con el tiempo), te explico c\u00f3mo montar un Rupertobot. Plataforma inferior con ballcasters Necesitar\u00e1s las siguientes piezas: Relaci\u00f3n de piezas Plataforma inferior(1 pieza) Ballcasters (2 piezas) Soporte de sensores IR/US (1 pieza, optativo; no la montes si no tienes los sensores) Portapilas para 6 pilas AA(1 pieza); si en su lugar deseas usar un portapilas de solo 5 pilas, del tipo las cinco en l\u00ednea, podr\u00e1s asegurarlo a las columnas que montar\u00e1s despu\u00e9s) Tuercas de m\u00e9trica 3 (8 piezas) Tornillos de m\u00e9trica 3 y 12 mm (8 piezas) Proceso de montaje Dependiendo de si vas a poner el soporte de los sensores de ultrasonidos/infrarrojos o no, el proceso es relativamente sencillo: coloca los dos ballcaster por debajo de la plataforma inferior; el trasero ya lo puedes sujetar con cuatro tornillos y tuercas, encajando cada tuerca en la depresi\u00f3n prevista a tal fin en la plataforma: Si quieres dejar montado el soporte para sensores, el mejor sitio para instalarlo es delante del hueco del portapilas; como es l\u00f3gico, entonces las tuercas de esa zona no las encajar\u00e1s contra los huecos en la plataforma, sino contra el propio sensor: Si vas a usar el portapilas de 6, recuerda que lo debes encajar en la protuberancia lista a tal efecto en la plataforma, aunque no lo vas a poder asegurar hasta que montes las columnas: Resumen Te dejo aqu\u00ed una animaci\u00f3n que resume el proceso hasta ahora (bien sencillo, como podr\u00e1s comprobar). Montaje de las columnas Ahora tienes que tener preparada la siguiente relaci\u00f3n de elementos: Relaci\u00f3n de piezas Columna (6 piezas) (atentos, que importa la posici\u00f3n en la que rota; orientaros siempre por la posici\u00f3n del hueco que dejo para embutir la tuerca) Tuercas de m\u00e9trica 3 (12 piezas) Tornillos de m\u00e9trica 3, longitud 14-16 mm Proceso de montaje En esta ocasi\u00f3n es sencillo. Mete las tuercas en los huecos de las columnas pensado para ellas, y atorn\u00edllalas a la plataforma inferior desde abajo con los tornillos. Da un poco igual la longitud exacta de estos tornillos, siempre que exceda de los 12 mm y no sobrepase los 20 mm. Resumen De nuevo una animaci\u00f3n, \u00a1no dir\u00e1s que te lo estoy poniendo dif\u00edcil! Motores y plataforma superior Es el momento de atornillar nuestros stepper y cerrar al Rupertobot con la plataforma superior. (Te aconsejo que embutas primero el interruptor en esta \u00faltima, con dos cables ya soldados para alimentar luego a la Arduino). Relaci\u00f3n de piezas Stepper modelo 28BYJ-48 (2 piezas) (aqu\u00ed es donde comprobar\u00e1s si has orientado correctamente las columnas laterales, porque de lo contrario los motores te quedar\u00e1n descuadrados o directamente no podr\u00e1s atornillarlos). Plataforma superior Tuercas de m\u00e9trica 3 (4 piezas) Tornillos de m\u00e9trica 3, longitud 16 mm (8 piezas) Proceso de montaje Atornillamos los stepper a las columnas (insisto, tienen orientaci\u00f3n con respecto al eje Z; se supone que los motores paso a paso van atornillados a los taladros m\u00e1s bajos de las columnas) Nos toca colocar la plataforma superior (ojo de nuevo a la orientaci\u00f3n si usas el soporte para sensor de infrarrojos; en teor\u00eda, la Arduino deber\u00eda quedar en el frontal del robot). Como puedes comprobar, se asegura atornill\u00e1ndola a las columnas que ya hab\u00edas fijado a la plataforma inferior. \u00a1Est\u00e1 todo pensado!. Resumen \u00a1Cada vez queda menos!. De nuevo te dejo una animaci\u00f3n de esta fase del proceso (me he equivocado, me faltan dos tornillos para atornillar la plataforma superior a las columnas interiores, pero me da mucha pereza rehacer la animaci\u00f3n): Ruedas y circuiter\u00eda \u00a1Bueno!. Pues vamos a ir cerrando el tema, que despu\u00e9s del montaje mec\u00e1nico nos queda todo el rollo del conexionado. Relaci\u00f3n de piezas Ruedas (tendr\u00e1s que calzarlas con una junta de 72x8 mm, a modo de neum\u00e1tico) Arduino UNO o Arduino NANO montada sobre su shield Driver de control de los motores paso a paso, ULN2003 Tornillos de m\u00e9trica 3, longitud 16 mm (8 piezas + 2 de 10 mm si quieres asegurar las ruedas) Tuercas de m\u00e9trica 3 (6 piezas para la Arduino y los driver + 2 si quieres asegurar las ruedas) Proceso de montaje En cuanto al tema de ruedas, os contar\u00e9 un secreto: vale cualquiera de las del Escornabot (echad un vistazo a Thingiverse) o las del Masaylo . El caso es que est\u00e1n dise\u00f1adas para ajustarse bastante bien al eje de los motores. No obstante, para no parecer poco profesional (spoiler: no lo soy en absoluto, pero bueno...) no he querido dejar las ruedas sin su propio sistema de ajuste por tornillo. Si veis que os quedan bailonas en el eje, usad un tornillo de 10 mm y una tuerca, ambos de m\u00e9trica 3. Lo que queda ya es cosa de poco. Atornillamos la circuiter\u00eda (nuestra Arduino y los dos driver de ambos stepper) a la plataforma superior Resumen \u00a1Y ya estar\u00eda todo!. Para rematar, te dejo la \u00faltima animaci\u00f3n del montaje. \u00a1Espero que no hayas tenido mucho problema con el ensamblado!. Recuerda que Rupertobot es a\u00fan un robot educativo, pero experimental.","title":"Instrucciones de montaje"},{"location":"montaje/#introduccion","text":"A lo largo de este documento (que intentar\u00e9 ir haciendo m\u00e1s extensivo y claro con el tiempo), te explico c\u00f3mo montar un Rupertobot.","title":"Introducci\u00f3n"},{"location":"montaje/#plataforma-inferior-con-ballcasters","text":"Necesitar\u00e1s las siguientes piezas: Relaci\u00f3n de piezas Plataforma inferior(1 pieza) Ballcasters (2 piezas) Soporte de sensores IR/US (1 pieza, optativo; no la montes si no tienes los sensores) Portapilas para 6 pilas AA(1 pieza); si en su lugar deseas usar un portapilas de solo 5 pilas, del tipo las cinco en l\u00ednea, podr\u00e1s asegurarlo a las columnas que montar\u00e1s despu\u00e9s) Tuercas de m\u00e9trica 3 (8 piezas) Tornillos de m\u00e9trica 3 y 12 mm (8 piezas)","title":"Plataforma inferior con ballcasters"},{"location":"montaje/#proceso-de-montaje","text":"Dependiendo de si vas a poner el soporte de los sensores de ultrasonidos/infrarrojos o no, el proceso es relativamente sencillo: coloca los dos ballcaster por debajo de la plataforma inferior; el trasero ya lo puedes sujetar con cuatro tornillos y tuercas, encajando cada tuerca en la depresi\u00f3n prevista a tal fin en la plataforma: Si quieres dejar montado el soporte para sensores, el mejor sitio para instalarlo es delante del hueco del portapilas; como es l\u00f3gico, entonces las tuercas de esa zona no las encajar\u00e1s contra los huecos en la plataforma, sino contra el propio sensor: Si vas a usar el portapilas de 6, recuerda que lo debes encajar en la protuberancia lista a tal efecto en la plataforma, aunque no lo vas a poder asegurar hasta que montes las columnas:","title":"Proceso de montaje"},{"location":"montaje/#resumen","text":"Te dejo aqu\u00ed una animaci\u00f3n que resume el proceso hasta ahora (bien sencillo, como podr\u00e1s comprobar).","title":"Resumen"},{"location":"montaje/#montaje-de-las-columnas","text":"Ahora tienes que tener preparada la siguiente relaci\u00f3n de elementos: Relaci\u00f3n de piezas Columna (6 piezas) (atentos, que importa la posici\u00f3n en la que rota; orientaros siempre por la posici\u00f3n del hueco que dejo para embutir la tuerca) Tuercas de m\u00e9trica 3 (12 piezas) Tornillos de m\u00e9trica 3, longitud 14-16 mm","title":"Montaje de las columnas"},{"location":"montaje/#proceso-de-montaje_1","text":"En esta ocasi\u00f3n es sencillo. Mete las tuercas en los huecos de las columnas pensado para ellas, y atorn\u00edllalas a la plataforma inferior desde abajo con los tornillos. Da un poco igual la longitud exacta de estos tornillos, siempre que exceda de los 12 mm y no sobrepase los 20 mm.","title":"Proceso de montaje"},{"location":"montaje/#resumen_1","text":"De nuevo una animaci\u00f3n, \u00a1no dir\u00e1s que te lo estoy poniendo dif\u00edcil!","title":"Resumen"},{"location":"montaje/#motores-y-plataforma-superior","text":"Es el momento de atornillar nuestros stepper y cerrar al Rupertobot con la plataforma superior. (Te aconsejo que embutas primero el interruptor en esta \u00faltima, con dos cables ya soldados para alimentar luego a la Arduino). Relaci\u00f3n de piezas Stepper modelo 28BYJ-48 (2 piezas) (aqu\u00ed es donde comprobar\u00e1s si has orientado correctamente las columnas laterales, porque de lo contrario los motores te quedar\u00e1n descuadrados o directamente no podr\u00e1s atornillarlos). Plataforma superior Tuercas de m\u00e9trica 3 (4 piezas) Tornillos de m\u00e9trica 3, longitud 16 mm (8 piezas)","title":"Motores y plataforma superior"},{"location":"montaje/#proceso-de-montaje_2","text":"Atornillamos los stepper a las columnas (insisto, tienen orientaci\u00f3n con respecto al eje Z; se supone que los motores paso a paso van atornillados a los taladros m\u00e1s bajos de las columnas) Nos toca colocar la plataforma superior (ojo de nuevo a la orientaci\u00f3n si usas el soporte para sensor de infrarrojos; en teor\u00eda, la Arduino deber\u00eda quedar en el frontal del robot). Como puedes comprobar, se asegura atornill\u00e1ndola a las columnas que ya hab\u00edas fijado a la plataforma inferior. \u00a1Est\u00e1 todo pensado!.","title":"Proceso de montaje"},{"location":"montaje/#resumen_2","text":"\u00a1Cada vez queda menos!. De nuevo te dejo una animaci\u00f3n de esta fase del proceso (me he equivocado, me faltan dos tornillos para atornillar la plataforma superior a las columnas interiores, pero me da mucha pereza rehacer la animaci\u00f3n):","title":"Resumen"},{"location":"montaje/#ruedas-y-circuiteria","text":"\u00a1Bueno!. Pues vamos a ir cerrando el tema, que despu\u00e9s del montaje mec\u00e1nico nos queda todo el rollo del conexionado. Relaci\u00f3n de piezas Ruedas (tendr\u00e1s que calzarlas con una junta de 72x8 mm, a modo de neum\u00e1tico) Arduino UNO o Arduino NANO montada sobre su shield Driver de control de los motores paso a paso, ULN2003 Tornillos de m\u00e9trica 3, longitud 16 mm (8 piezas + 2 de 10 mm si quieres asegurar las ruedas) Tuercas de m\u00e9trica 3 (6 piezas para la Arduino y los driver + 2 si quieres asegurar las ruedas)","title":"Ruedas y circuiter\u00eda"},{"location":"montaje/#proceso-de-montaje_3","text":"En cuanto al tema de ruedas, os contar\u00e9 un secreto: vale cualquiera de las del Escornabot (echad un vistazo a Thingiverse) o las del Masaylo . El caso es que est\u00e1n dise\u00f1adas para ajustarse bastante bien al eje de los motores. No obstante, para no parecer poco profesional (spoiler: no lo soy en absoluto, pero bueno...) no he querido dejar las ruedas sin su propio sistema de ajuste por tornillo. Si veis que os quedan bailonas en el eje, usad un tornillo de 10 mm y una tuerca, ambos de m\u00e9trica 3. Lo que queda ya es cosa de poco. Atornillamos la circuiter\u00eda (nuestra Arduino y los dos driver de ambos stepper) a la plataforma superior","title":"Proceso de montaje"},{"location":"montaje/#resumen_3","text":"\u00a1Y ya estar\u00eda todo!. Para rematar, te dejo la \u00faltima animaci\u00f3n del montaje. \u00a1Espero que no hayas tenido mucho problema con el ensamblado!. Recuerda que Rupertobot es a\u00fan un robot educativo, pero experimental.","title":"Resumen"},{"location":"movimiento/","text":"Movimiento Introducci\u00f3n En esta secci\u00f3n vamos a asegurar lo que sabemos sobre el funcionamiento de un motor de tipo paso a paso y aprenderemos a programar a nuestro Rupertobot para que pueda avanzar, retroceder y girar. Mover una rueda Como te explicaba en el apartado de conexionado de estos motores , su principio de funcionamiento reside en que cuenta con cuatro bobinas que debemos ir excitando (esto es, proporcionarle tensi\u00f3n mediante un \"1\" l\u00f3gico) en el orden adecuado. Para nuestro primer ejemplo, elegiremos la rueda derecha del Rupertobot, que est\u00e1 controlada por los pines 2, 3, 4 y 5 de nuestra Arduino. \u00c9sta deber\u00eda ser la secuencia l\u00f3gica de control: Aunque existen otros modos m\u00e1s eficientes de mover nuestro motor, este es el m\u00e1s sencillo: excitar una bobina a la vez. Se conoce como el modo de paso completo de funcionamiento de un Stepper. Veamos c\u00f3mo programarlo en MasayloBlockly... Programaci\u00f3n mediante MasayloBlockly En el modo primerizo de MasayloBlockly, s\u00f3lo necesitaremos los grupos de piezas Arduino y Tiempo . Tal como hemos especificado en el gr\u00e1fico anterior, la idea es ir excitando una bobina cada vez, y dejar un tiempo m\u00ednimo (del orden de milisegundos) para permitir que se produzca el movimiento, tal que as\u00ed: Sencillo, \u00bfverdad?. Pues s\u00f3lo tenemos que repetir el proceso tres veces m\u00e1s, para ir excitando una bobina a la vez, por orden. Al finalizar el programa, como ya imaginar\u00e1s, vuelve a empezar. El resultado es un movimiento infinito de la rueda en sentido horario: Ahora, dependiendo de lo r\u00e1pido que quieras que vaya tu Rupertobot, s\u00f3lo tienes que reducir el tiempo que esperas entre cada conmutaci\u00f3n. Eso s\u00ed, debes dejar el tiempo m\u00ednimo para permitir el movimiento del eje. Por debajo de 2 milisegundos, ya te dar\u00e1 problemas. Programa tu Arduino Si prefieres tirar del IDE de Arduino, el c\u00f3digo b\u00e1sico ser\u00eda: void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); } void loop() { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); delay(5); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); delay(5); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); delay(5); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); delay(5); } Descarga el programa Rueda derecha, sentido horario, programa para MasayloBlockly Rueda derecha, sentido horario, programa para IDE de Arduino","title":"Mover una rueda"},{"location":"movimiento/#movimiento","text":"","title":"Movimiento"},{"location":"movimiento/#introduccion","text":"En esta secci\u00f3n vamos a asegurar lo que sabemos sobre el funcionamiento de un motor de tipo paso a paso y aprenderemos a programar a nuestro Rupertobot para que pueda avanzar, retroceder y girar.","title":"Introducci\u00f3n"},{"location":"movimiento/#mover-una-rueda","text":"Como te explicaba en el apartado de conexionado de estos motores , su principio de funcionamiento reside en que cuenta con cuatro bobinas que debemos ir excitando (esto es, proporcionarle tensi\u00f3n mediante un \"1\" l\u00f3gico) en el orden adecuado. Para nuestro primer ejemplo, elegiremos la rueda derecha del Rupertobot, que est\u00e1 controlada por los pines 2, 3, 4 y 5 de nuestra Arduino. \u00c9sta deber\u00eda ser la secuencia l\u00f3gica de control: Aunque existen otros modos m\u00e1s eficientes de mover nuestro motor, este es el m\u00e1s sencillo: excitar una bobina a la vez. Se conoce como el modo de paso completo de funcionamiento de un Stepper. Veamos c\u00f3mo programarlo en MasayloBlockly...","title":"Mover una rueda"},{"location":"movimiento/#programacion-mediante-masayloblockly","text":"En el modo primerizo de MasayloBlockly, s\u00f3lo necesitaremos los grupos de piezas Arduino y Tiempo . Tal como hemos especificado en el gr\u00e1fico anterior, la idea es ir excitando una bobina cada vez, y dejar un tiempo m\u00ednimo (del orden de milisegundos) para permitir que se produzca el movimiento, tal que as\u00ed: Sencillo, \u00bfverdad?. Pues s\u00f3lo tenemos que repetir el proceso tres veces m\u00e1s, para ir excitando una bobina a la vez, por orden. Al finalizar el programa, como ya imaginar\u00e1s, vuelve a empezar. El resultado es un movimiento infinito de la rueda en sentido horario: Ahora, dependiendo de lo r\u00e1pido que quieras que vaya tu Rupertobot, s\u00f3lo tienes que reducir el tiempo que esperas entre cada conmutaci\u00f3n. Eso s\u00ed, debes dejar el tiempo m\u00ednimo para permitir el movimiento del eje. Por debajo de 2 milisegundos, ya te dar\u00e1 problemas.","title":"Programaci\u00f3n mediante MasayloBlockly"},{"location":"movimiento/#programa-tu-arduino","text":"Si prefieres tirar del IDE de Arduino, el c\u00f3digo b\u00e1sico ser\u00eda: void setup() { pinMode(2, OUTPUT); pinMode(3, OUTPUT); pinMode(4, OUTPUT); pinMode(5, OUTPUT); } void loop() { digitalWrite(2, HIGH); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, LOW); delay(5); digitalWrite(2, LOW); digitalWrite(3, HIGH); digitalWrite(4, LOW); digitalWrite(5, LOW); delay(5); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, HIGH); digitalWrite(5, LOW); delay(5); digitalWrite(2, LOW); digitalWrite(3, LOW); digitalWrite(4, LOW); digitalWrite(5, HIGH); delay(5); }","title":"Programa tu Arduino"},{"location":"movimiento/#descarga-el-programa","text":"Rueda derecha, sentido horario, programa para MasayloBlockly Rueda derecha, sentido horario, programa para IDE de Arduino","title":"Descarga el programa"},{"location":"siguelineas/","text":"Siguel\u00edneas Introducci\u00f3n Una de las posibilidades m\u00e1s atractivas para un robot educativo como el Rupertobot es programarlo como un siguel\u00edneas. Nuestro ruperti cuenta con dos sensores de infrarrojos (sensores IR, para abreviar) conectados en las patillas A0 el derecho, o n\u00famero 14 si lo tratamos como un pin digital, y A1 (pin digital 15) el izquierdo. Por supuesto, estoy insistiendo mucho en todos estos textos en que t\u00fa puedes elegir a qu\u00e9 patillas de tu Arduino conectar cada elemento que quieras incorporar a tu robot, pero te recuerdo que todos los ejemplos de programaci\u00f3n que publico por aqu\u00ed responden a esta organizaci\u00f3n del conexionado. El caso es que estos sensores, aparte de poder usarlos como sensores de obst\u00e1culos, est\u00e1n principalmente orientados a discernir si se encuentran ante una superficie oscura o una superficie clara. El principio de un robot siguel\u00edneas es que va avanzando sobre una superficie blanca sobre la que hay un camino de color negro. Aqu\u00ed te dejo un v\u00eddeo de ejemplo (no es Rupertobot, sino su primo Masaylo ) Los sensores IR que estamos utilizando dan un \"1\" l\u00f3gico cuando est\u00e1n frente a una superficie clara y un \"0\" cuando \"pisan\" el color negro. Principio de funcionamiento Como ya te he comentado, la clave de este tipo de desaf\u00edos radica en los sensores IR, dispuestos a izquierda y a derecha del robot, a suficiente distancia entre ellos para abarcar la superficie blanca del circuito sin llegar a tocar la pista negra, a menos que se desv\u00ede a la izquierda o hacia la derecha. El principio general del programa es: si pisas blanco a derecha y a izquierda, vas bien. Sigue hacia adelante: Si, en cambio, nos desviamos por la derecha, el sensor IR de la izquierda (el 15), detectar\u00e1 un color negro. Es hora de girar un poquito A LA IZQUIERDA para retomar nuestro camino. Por \u00faltimo, el caso contrario: si es el sensor derecho el que detecta un \"0\" l\u00f3gico (\"Estoy pisando algo negro\"), significa que nos estamos yendo por la izquierda. Hora es entonces de corregir el rumbo desvi\u00e1ndonos hacia la derecha: Programa en MasayloBlockly Partiremos de que ya tienes determinadas las funciones que definen los movimientos b\u00e1sicos del ruperti (lo tienes en los Ejemplos de programaci\u00f3n, donde te los puedes descargar ). As\u00ed no atiborraremos tu pantalla con demasiadas instrucciones, pero recuerda que tu programa ya tiene que tener incorporadas dichas funciones. Vamos, pues, a definir una nueva funci\u00f3n que llamaremos siguelineas , que tendr\u00e1 en cuenta las tres posibilidades que hemos definido en el apartado anterior. Como novedad, en esta ocasi\u00f3n tenemos que a\u00f1adir un operador l\u00f3gico , que quiz\u00e1s desconozcas si te est\u00e1s iniciando en el mundillo de la programaci\u00f3n. Un operador l\u00f3gico es una herramienta que en programaci\u00f3n se utiliza para realizar operaciones booleanas con valores y variables. As\u00ed podemos comparar dos o m\u00e1s situaciones de un modo l\u00f3gico: saber si pasan dos cosas a la vez ,o reaccionar si pasa una cosa o la otra , incluso puedo comprobar si pasa lo contrario a lo que yo tengo previsto . Como se dice, el movimiento se demuestra andando, as\u00ed que si eres nueva o nuevo en estas lides, no te preocupes demasiado. Aprender\u00e1s con la pr\u00e1ctica. El caso es que en la funci\u00f3n siguelineas vamos a ir comparando el valor detectado por cada sensor a la vez. Para ello, nos valdremos del operador l\u00f3gico y o and (en programaci\u00f3n se suele representar como && ), por que necesitamos saber simult\u00e1neamente qu\u00e9 detecta cada IR. FUNCI\u00d3N SIGUEL\u00cdNEAS DERECHA IZQUIERDA RESULTADO BLANCO BLANCO ADELANTE BLANCO NEGRO IZQUIERDA NEGRO BLANCO DERECHA \u00a1Bueno!. Pues vamos al l\u00edo. En MasayloBlockly, los operadores l\u00f3gicos est\u00e1n en el bloque de comandos l\u00f3gica (ya ves t\u00fa qu\u00e9 original). La funci\u00f3n siguelineas , pues, tendr\u00e1 esta pinta: Como te explicaba en los ejemplos de Uso de funciones , esta funci\u00f3n por s\u00ed sola no hace nada hasta que no la llamas en tu programa principal. Una vez creada, puedes llamarla en tu programa, e incluso combinarla con otras funciones (por ejemplo, puedes incluir el uso del sensor US para que detecte obst\u00e1culos, en cuyo caso el robot se parar\u00eda en mitad del circuito). Por otro lado, observar\u00e1s que el comportamiento de tu ruperti variar\u00e1 seg\u00fan los cm que quieres que avance cuando va hacia adelante y del \u00e1ngulo de desviaci\u00f3n que elijas para los giros. Seg\u00fan el tama\u00f1o del valor, tu robot ser\u00e1 m\u00e1s veloz o m\u00e1s preciso. En tus manos est\u00e1 ir experimentando con esos n\u00fameros. Una \u00faltima apreciaci\u00f3n: observar\u00e1s que no he consignado ninguna respuesta si los sensores derecho e izquierdo detectan A LA VEZ un negro. En un circuito sencillo, esto no tendr\u00eda que pasar nunca, porque no hay bifurcaciones. Si en alg\u00fan momento sucede, como no est\u00e1 previsto, tu robot simplemente se parar\u00e1. En casos m\u00e1s complejos, como es el de las bifurcaciones (el camino toma dos ramales), pues tendr\u00e1s que perfeccionar tu programa, claro. Yo suelo sugerir el uso de variables que lleven la cuenta de cu\u00e1ntas veces me hallo en una bifurcaci\u00f3n para que mi ruperti vaya a la derecha o a la izquierda, pero eso ya excede el objetivo de esta humilde web. Programa en Arduino Como en otras ocasiones, si tienes cierto manejo en C++ (el lenguaje del IDE de Arduino), te proporciono, no el programa completo, por no ser redundante, pero s\u00ed el c\u00f3digo correspondiente a la funci\u00f3n siguelineas : void siguelineas() { if (digitalRead(14) == HIGH & digitalRead(15) == HIGH) { adelante(1); } if (digitalRead(14) == HIGH & digitalRead(15) == LOW) { izquierda(15); } if (digitalRead(14) == LOW & digitalRead(15) == HIGH) { derecha(15); } } Descarga los programas completos Programa b\u00e1sico de siguel\u00edneas para MasayloBlockly Programa b\u00e1sico de siguel\u00edneas para la IDE de Arduino Imprime tu circuito de prueba Como no me ha resultado f\u00e1cil encontrar circuitos simples en Internet para esta pr\u00e1ctica, he creado el m\u00edo propio, un pdf que puedes descargar libremente (soy as\u00ed de generoso) e imprimir. Est\u00e1 en tama\u00f1o A0, as\u00ed que tenlo en cuenta si vas a reducirlo, porque el grosor de la l\u00ednea negra se reducir\u00e1 tambi\u00e9n. Haz click en la imagen para descargarlo. Que la fuerza te acompa\u00f1e.","title":"Rupertobot como siguel\u00edneas"},{"location":"siguelineas/#siguelineas","text":"","title":"Siguel\u00edneas"},{"location":"siguelineas/#introduccion","text":"Una de las posibilidades m\u00e1s atractivas para un robot educativo como el Rupertobot es programarlo como un siguel\u00edneas. Nuestro ruperti cuenta con dos sensores de infrarrojos (sensores IR, para abreviar) conectados en las patillas A0 el derecho, o n\u00famero 14 si lo tratamos como un pin digital, y A1 (pin digital 15) el izquierdo. Por supuesto, estoy insistiendo mucho en todos estos textos en que t\u00fa puedes elegir a qu\u00e9 patillas de tu Arduino conectar cada elemento que quieras incorporar a tu robot, pero te recuerdo que todos los ejemplos de programaci\u00f3n que publico por aqu\u00ed responden a esta organizaci\u00f3n del conexionado. El caso es que estos sensores, aparte de poder usarlos como sensores de obst\u00e1culos, est\u00e1n principalmente orientados a discernir si se encuentran ante una superficie oscura o una superficie clara. El principio de un robot siguel\u00edneas es que va avanzando sobre una superficie blanca sobre la que hay un camino de color negro. Aqu\u00ed te dejo un v\u00eddeo de ejemplo (no es Rupertobot, sino su primo Masaylo ) Los sensores IR que estamos utilizando dan un \"1\" l\u00f3gico cuando est\u00e1n frente a una superficie clara y un \"0\" cuando \"pisan\" el color negro.","title":"Introducci\u00f3n"},{"location":"siguelineas/#principio-de-funcionamiento","text":"Como ya te he comentado, la clave de este tipo de desaf\u00edos radica en los sensores IR, dispuestos a izquierda y a derecha del robot, a suficiente distancia entre ellos para abarcar la superficie blanca del circuito sin llegar a tocar la pista negra, a menos que se desv\u00ede a la izquierda o hacia la derecha. El principio general del programa es: si pisas blanco a derecha y a izquierda, vas bien. Sigue hacia adelante: Si, en cambio, nos desviamos por la derecha, el sensor IR de la izquierda (el 15), detectar\u00e1 un color negro. Es hora de girar un poquito A LA IZQUIERDA para retomar nuestro camino. Por \u00faltimo, el caso contrario: si es el sensor derecho el que detecta un \"0\" l\u00f3gico (\"Estoy pisando algo negro\"), significa que nos estamos yendo por la izquierda. Hora es entonces de corregir el rumbo desvi\u00e1ndonos hacia la derecha:","title":"Principio de funcionamiento"},{"location":"siguelineas/#programa-en-masayloblockly","text":"Partiremos de que ya tienes determinadas las funciones que definen los movimientos b\u00e1sicos del ruperti (lo tienes en los Ejemplos de programaci\u00f3n, donde te los puedes descargar ). As\u00ed no atiborraremos tu pantalla con demasiadas instrucciones, pero recuerda que tu programa ya tiene que tener incorporadas dichas funciones. Vamos, pues, a definir una nueva funci\u00f3n que llamaremos siguelineas , que tendr\u00e1 en cuenta las tres posibilidades que hemos definido en el apartado anterior. Como novedad, en esta ocasi\u00f3n tenemos que a\u00f1adir un operador l\u00f3gico , que quiz\u00e1s desconozcas si te est\u00e1s iniciando en el mundillo de la programaci\u00f3n. Un operador l\u00f3gico es una herramienta que en programaci\u00f3n se utiliza para realizar operaciones booleanas con valores y variables. As\u00ed podemos comparar dos o m\u00e1s situaciones de un modo l\u00f3gico: saber si pasan dos cosas a la vez ,o reaccionar si pasa una cosa o la otra , incluso puedo comprobar si pasa lo contrario a lo que yo tengo previsto . Como se dice, el movimiento se demuestra andando, as\u00ed que si eres nueva o nuevo en estas lides, no te preocupes demasiado. Aprender\u00e1s con la pr\u00e1ctica. El caso es que en la funci\u00f3n siguelineas vamos a ir comparando el valor detectado por cada sensor a la vez. Para ello, nos valdremos del operador l\u00f3gico y o and (en programaci\u00f3n se suele representar como && ), por que necesitamos saber simult\u00e1neamente qu\u00e9 detecta cada IR. FUNCI\u00d3N SIGUEL\u00cdNEAS DERECHA IZQUIERDA RESULTADO BLANCO BLANCO ADELANTE BLANCO NEGRO IZQUIERDA NEGRO BLANCO DERECHA \u00a1Bueno!. Pues vamos al l\u00edo. En MasayloBlockly, los operadores l\u00f3gicos est\u00e1n en el bloque de comandos l\u00f3gica (ya ves t\u00fa qu\u00e9 original). La funci\u00f3n siguelineas , pues, tendr\u00e1 esta pinta: Como te explicaba en los ejemplos de Uso de funciones , esta funci\u00f3n por s\u00ed sola no hace nada hasta que no la llamas en tu programa principal. Una vez creada, puedes llamarla en tu programa, e incluso combinarla con otras funciones (por ejemplo, puedes incluir el uso del sensor US para que detecte obst\u00e1culos, en cuyo caso el robot se parar\u00eda en mitad del circuito). Por otro lado, observar\u00e1s que el comportamiento de tu ruperti variar\u00e1 seg\u00fan los cm que quieres que avance cuando va hacia adelante y del \u00e1ngulo de desviaci\u00f3n que elijas para los giros. Seg\u00fan el tama\u00f1o del valor, tu robot ser\u00e1 m\u00e1s veloz o m\u00e1s preciso. En tus manos est\u00e1 ir experimentando con esos n\u00fameros. Una \u00faltima apreciaci\u00f3n: observar\u00e1s que no he consignado ninguna respuesta si los sensores derecho e izquierdo detectan A LA VEZ un negro. En un circuito sencillo, esto no tendr\u00eda que pasar nunca, porque no hay bifurcaciones. Si en alg\u00fan momento sucede, como no est\u00e1 previsto, tu robot simplemente se parar\u00e1. En casos m\u00e1s complejos, como es el de las bifurcaciones (el camino toma dos ramales), pues tendr\u00e1s que perfeccionar tu programa, claro. Yo suelo sugerir el uso de variables que lleven la cuenta de cu\u00e1ntas veces me hallo en una bifurcaci\u00f3n para que mi ruperti vaya a la derecha o a la izquierda, pero eso ya excede el objetivo de esta humilde web.","title":"Programa en MasayloBlockly"},{"location":"siguelineas/#programa-en-arduino","text":"Como en otras ocasiones, si tienes cierto manejo en C++ (el lenguaje del IDE de Arduino), te proporciono, no el programa completo, por no ser redundante, pero s\u00ed el c\u00f3digo correspondiente a la funci\u00f3n siguelineas : void siguelineas() { if (digitalRead(14) == HIGH & digitalRead(15) == HIGH) { adelante(1); } if (digitalRead(14) == HIGH & digitalRead(15) == LOW) { izquierda(15); } if (digitalRead(14) == LOW & digitalRead(15) == HIGH) { derecha(15); } }","title":"Programa en Arduino"},{"location":"siguelineas/#descarga-los-programas-completos","text":"Programa b\u00e1sico de siguel\u00edneas para MasayloBlockly Programa b\u00e1sico de siguel\u00edneas para la IDE de Arduino","title":"Descarga los programas completos"},{"location":"siguelineas/#imprime-tu-circuito-de-prueba","text":"Como no me ha resultado f\u00e1cil encontrar circuitos simples en Internet para esta pr\u00e1ctica, he creado el m\u00edo propio, un pdf que puedes descargar libremente (soy as\u00ed de generoso) e imprimir. Est\u00e1 en tama\u00f1o A0, as\u00ed que tenlo en cuenta si vas a reducirlo, porque el grosor de la l\u00ednea negra se reducir\u00e1 tambi\u00e9n. Haz click en la imagen para descargarlo. Que la fuerza te acompa\u00f1e.","title":"Imprime tu circuito de prueba"},{"location":"STL/","text":"STL files are here :)","title":"Index"},{"location":"STL/archivosSTL/","text":"Archivos en STL Descarga aqu\u00ed los archivos en STL Imagen Archivo STL Comentario Ballcaster Proporciona un soporte al Rupertobot, intentando reducir el rozamiento con el suelo al m\u00ednimo (todav\u00eda estoy decidiendo si lo reduzco un par de mm para mejorar la tracci\u00f3n, a riesgo de aumentar el cabeceo del robot) Plataforma inferior Incorpora un sistema de sujeci\u00f3n para bol\u00edgrafo o rotulador Plataforma superior Tiene pendiente alguna se\u00f1al que mejore la orientaci\u00f3n a la hora de montarlo sobre la plataforma inferior Columna Une las plataformas superior e inferior con un ingenioso (a m\u00ed me lo parece) sistema de tornillos y tuercas (Necesitas imprimir seis) Rueda La rueda es la del Masaylo (que para eso lo dise\u00f1\u00e9 yo, aunque me ayudaron los compis del Club de Rob\u00f3tica de Granada). En realidad, te sirve cualquier rueda del Escornabot Soporte de zumbador Pieza fusilada a Federico Coca","title":"Archivos STL (para imprimir en 3D)"},{"location":"STL/archivosSTL/#archivos-en-stl","text":"","title":"Archivos en STL"},{"location":"STL/archivosSTL/#descarga-aqui-los-archivos-en-stl","text":"Imagen Archivo STL Comentario Ballcaster Proporciona un soporte al Rupertobot, intentando reducir el rozamiento con el suelo al m\u00ednimo (todav\u00eda estoy decidiendo si lo reduzco un par de mm para mejorar la tracci\u00f3n, a riesgo de aumentar el cabeceo del robot) Plataforma inferior Incorpora un sistema de sujeci\u00f3n para bol\u00edgrafo o rotulador Plataforma superior Tiene pendiente alguna se\u00f1al que mejore la orientaci\u00f3n a la hora de montarlo sobre la plataforma inferior Columna Une las plataformas superior e inferior con un ingenioso (a m\u00ed me lo parece) sistema de tornillos y tuercas (Necesitas imprimir seis) Rueda La rueda es la del Masaylo (que para eso lo dise\u00f1\u00e9 yo, aunque me ayudaron los compis del Club de Rob\u00f3tica de Granada). En realidad, te sirve cualquier rueda del Escornabot Soporte de zumbador Pieza fusilada a Federico Coca","title":"Descarga aqu\u00ed los archivos en STL"},{"location":"archivos/cad/","text":"FreeCAD Aqu\u00ed tienes los archivos de RupertoBot en FreeCAD Instalaci\u00f3n en Windows . Instalaci\u00f3n en MacOS . Instalaci\u00f3n en Linux .","title":"FreeCAD"},{"location":"archivos/cad/#freecad","text":"Aqu\u00ed tienes los archivos de RupertoBot en FreeCAD Instalaci\u00f3n en Windows . Instalaci\u00f3n en MacOS . Instalaci\u00f3n en Linux .","title":"FreeCAD"},{"location":"ayuda/ayuda/","text":"Ayuda TODO: Esta es una secci\u00f3n de ayuda para cuando tengas problemas escribiendo el taller. \u00dasalo como consulta mientras lo est\u00e1s redactando (el taller), pero recuerda comentarlo en el mkdocs.yml para que no aparezca en tu web. mkdocs.yml -> Debe quedar el punto 5 m\u00e1s o menos as\u00ed ... # 5. Navegaci\u00f3n nav: - Introducci\u00f3n: index.md - Autor / Autores: about.md - Instalaci\u00f3n: - Windows: instalacion/windows.md - Mac OS: instalacion/macos.md - Linux: instalacion/linux.md - ... # - Chuletas para escribir: # - Ayuda: ayuda/ayuda.md # - Markdown: ayuda/markdown.md # - Material Design: ayuda/material.md ... Tienes una ayuda b\u00e1sica para desenvolverte con Markdown. Y otra para poder sacarle m\u00e1s partido al tema Material Design: Escribir Markdown Sacarle jugo al tema Material Design","title":"Ayuda"},{"location":"ayuda/ayuda/#ayuda","text":"TODO: Esta es una secci\u00f3n de ayuda para cuando tengas problemas escribiendo el taller. \u00dasalo como consulta mientras lo est\u00e1s redactando (el taller), pero recuerda comentarlo en el mkdocs.yml para que no aparezca en tu web. mkdocs.yml -> Debe quedar el punto 5 m\u00e1s o menos as\u00ed ... # 5. Navegaci\u00f3n nav: - Introducci\u00f3n: index.md - Autor / Autores: about.md - Instalaci\u00f3n: - Windows: instalacion/windows.md - Mac OS: instalacion/macos.md - Linux: instalacion/linux.md - ... # - Chuletas para escribir: # - Ayuda: ayuda/ayuda.md # - Markdown: ayuda/markdown.md # - Material Design: ayuda/material.md ... Tienes una ayuda b\u00e1sica para desenvolverte con Markdown. Y otra para poder sacarle m\u00e1s partido al tema Material Design: Escribir Markdown Sacarle jugo al tema Material Design","title":"Ayuda"},{"location":"ayuda/markdown/","text":"Chuleta de Markdown Esta es solo una chuleta de Markdown b\u00e1sico. En esta web tienes una referencia muy buena -> Web de Markdown . Para escribir Markdown se recomienda usar como editor VSCode o VSCodium con las extensiones: Markdown All in One Markdownlint T\u00edtulos Esto es un t\u00edtulo 1 -> Usar solo al principio del fichero Esto es un t\u00edtulo 2 -> Usar para dividir en secciones Esto es un t\u00edtulo 3 -> Usar para dividir en subsecciones Esto es un t\u00edtulo 4 -> No recomendado su uso Esto es un t\u00edtulo 5 -> No recomendado su uso Esto es un t\u00edtulo 6 -> No recomendado su uso Textos Texto en negrita . Texto en cursiva . Para poner un salto de linea tienes que poner dos espacios en blanco despu\u00e9s del punto. Esta l\u00ednea est\u00e1 debajo. Pero esta sale seguido. O debes de poner una l\u00ednea vac\u00eda entre medias. Enlaces As\u00ed se pone un enlace a una p\u00e1gina de Internet . As\u00ed se pone un enlace a una p\u00e1gina del propio taller . Im\u00e1genes As\u00ed se pone una imagen desde Internet Y as\u00ed se pone una imagen desde el propio taller Listas Listas sin orden con * , ejemplo: Esto es una lista Lista sin orden. Listas ordenadas con 1. , ejemplo: Esto es una Lista ordenada Citas Si quieres poner una cita tienes que usar > delante del texto, ejemplo: Esto es una cita Esto es una cita anidada Esto es una cita doblemente anidada Regla horizontal Se hace para poner una l\u00ednea que divisa visualmente una secci\u00f3n de otra. Aqu\u00ed hay una. Tablas En este ejemplo tienes una tabla con 3 columnas: La primera tiene el texto fijado a la izquierda. La segunda tiene el texto fijado al centro. La tercera tiene el texto fijado a la derecha. Texto a la izquierda Texto en el centro Texto en la derecha En un lugar de la mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivia un hidalgo de los de lanza en astillero, adarga antigua, roc\u00edn flaco y galgo corredor... L\u00edneas de c\u00f3digo Para poner c\u00f3digo en l\u00ednea, tienes que ponerlo entre las comillas `. Aqu\u00ed tienes un ejemplo de c\u00f3digo en l\u00ednea. Si quisieras poner un bloque de c\u00f3digo tienes que poner 3 comillas `, debajo el c\u00f3digo, y una \u00faltima l\u00ednea con otras 3 comillas. Puedes incluso espec\u00edficarle el lenguaje del c\u00f3digo para que te lo coloree. Ah\u00ed va un ejemplo en Python: import antigravity print('Hola mundo')","title":"Chuleta de Markdown"},{"location":"ayuda/markdown/#chuleta-de-markdown","text":"Esta es solo una chuleta de Markdown b\u00e1sico. En esta web tienes una referencia muy buena -> Web de Markdown . Para escribir Markdown se recomienda usar como editor VSCode o VSCodium con las extensiones: Markdown All in One Markdownlint","title":"Chuleta de Markdown"},{"location":"ayuda/markdown/#titulos","text":"","title":"T\u00edtulos"},{"location":"ayuda/markdown/#esto-es-un-titulo-1-usar-solo-al-principio-del-fichero","text":"","title":"Esto es un t\u00edtulo 1 -&gt; Usar solo al principio del fichero"},{"location":"ayuda/markdown/#esto-es-un-titulo-2-usar-para-dividir-en-secciones","text":"","title":"Esto es un t\u00edtulo 2 -&gt; Usar para dividir en secciones"},{"location":"ayuda/markdown/#esto-es-un-titulo-3-usar-para-dividir-en-subsecciones","text":"","title":"Esto es un t\u00edtulo 3 -&gt; Usar para dividir en subsecciones"},{"location":"ayuda/markdown/#esto-es-un-titulo-4-no-recomendado-su-uso","text":"","title":"Esto es un t\u00edtulo 4 -&gt; No recomendado su uso"},{"location":"ayuda/markdown/#esto-es-un-titulo-5-no-recomendado-su-uso","text":"","title":"Esto es un t\u00edtulo 5 -&gt; No recomendado su uso"},{"location":"ayuda/markdown/#esto-es-un-titulo-6-no-recomendado-su-uso","text":"","title":"Esto es un t\u00edtulo 6 -&gt; No recomendado su uso"},{"location":"ayuda/markdown/#textos","text":"Texto en negrita . Texto en cursiva . Para poner un salto de linea tienes que poner dos espacios en blanco despu\u00e9s del punto. Esta l\u00ednea est\u00e1 debajo. Pero esta sale seguido. O debes de poner una l\u00ednea vac\u00eda entre medias.","title":"Textos"},{"location":"ayuda/markdown/#enlaces","text":"As\u00ed se pone un enlace a una p\u00e1gina de Internet . As\u00ed se pone un enlace a una p\u00e1gina del propio taller .","title":"Enlaces"},{"location":"ayuda/markdown/#imagenes","text":"As\u00ed se pone una imagen desde Internet Y as\u00ed se pone una imagen desde el propio taller","title":"Im\u00e1genes"},{"location":"ayuda/markdown/#listas","text":"Listas sin orden con * , ejemplo: Esto es una lista Lista sin orden. Listas ordenadas con 1. , ejemplo: Esto es una Lista ordenada","title":"Listas"},{"location":"ayuda/markdown/#citas","text":"Si quieres poner una cita tienes que usar > delante del texto, ejemplo: Esto es una cita Esto es una cita anidada Esto es una cita doblemente anidada","title":"Citas"},{"location":"ayuda/markdown/#regla-horizontal","text":"Se hace para poner una l\u00ednea que divisa visualmente una secci\u00f3n de otra. Aqu\u00ed hay una.","title":"Regla horizontal"},{"location":"ayuda/markdown/#tablas","text":"En este ejemplo tienes una tabla con 3 columnas: La primera tiene el texto fijado a la izquierda. La segunda tiene el texto fijado al centro. La tercera tiene el texto fijado a la derecha. Texto a la izquierda Texto en el centro Texto en la derecha En un lugar de la mancha, de cuyo nombre no quiero acordarme, no ha mucho tiempo que vivia un hidalgo de los de lanza en astillero, adarga antigua, roc\u00edn flaco y galgo corredor...","title":"Tablas"},{"location":"ayuda/markdown/#lineas-de-codigo","text":"Para poner c\u00f3digo en l\u00ednea, tienes que ponerlo entre las comillas `. Aqu\u00ed tienes un ejemplo de c\u00f3digo en l\u00ednea. Si quisieras poner un bloque de c\u00f3digo tienes que poner 3 comillas `, debajo el c\u00f3digo, y una \u00faltima l\u00ednea con otras 3 comillas. Puedes incluso espec\u00edficarle el lenguaje del c\u00f3digo para que te lo coloree. Ah\u00ed va un ejemplo en Python: import antigravity print('Hola mundo')","title":"L\u00edneas de c\u00f3digo"},{"location":"ayuda/material/","text":"Material Design Esta chuleta es un copia-pega modificado de esta p\u00e1gina . B\u00e1sicamente es un Markdown espec\u00edfico para poder ser usado con el tema Material Design y sacarle m\u00e1s partido. Enlaces Existe la posibilidad de utilizar referencias a enlaces que se definen posteriormente. En ese caso unicamente incluimos el n\u00famero de enlace. M\u00e1s adelante es necesario definir el enlace que corresponde con cada n\u00famero y, opcionalmente, un texto descriptivo. :::markdown Podemos comprar un ordenador (Dell)[1] o (Apple)[2]. [1]: http://dell.com/ \"Comprar en Dell\" [2]: http://apple.com/ \"Comprar en Apple\" Podemos comprar un ordenador Dell o Apple . Imagenes Tambi\u00e9n es posible utilizar referencias que es necesario definir posteriormente. :::markdown ![texto alternativo][id] [id]: /img/md-logo.png \"Titulo opcional\" Secuencias de escape Puede ocurrir que alguno de los caracteres especiales utilizados en markdown aparezcan de forma fortuita en el texto y originen efectos no deseados. Para evitarlo podemos utilizar las secuencias de escape para especificar que deseamos utilizar el caracter como texto sin que tenga ning\u00fan efecto colateral. Podemos utilizar el caracter '\\' junto con cualquiera de los siguientes para crear una secuencia de escape. \\ backslash ` backtick * asterisco _ underscore {} curly braces [] square brackets () parentheses # hash mark + plus sign - minus sign (hyphen) . dot ! exclamation mark C\u00f3digo Para marcar texto como c\u00f3digo es necesario indentar cada l\u00ednea del bloque con cuatro espacios o una tabulaci\u00f3n. Si el c\u00f3digo va embebido en un p\u00e1rrafo, es neceario rodearlo por comillas simples invertidas. Consultar la secci\u00f3n de CodeHilite y de InlineHilite para funcionalidades extendidas. Extensiones Admonition Extensi\u00f3n incluida en la librer\u00eda est\u00e1ndar de Markdown que permite incluir contenido adicional en cajas de color con un t\u00edtulo y un icono. Por ejemplo para res\u00famenes, notas, consejos o avisos. !!! note Esto es un ejemplo de nota (note, seealso). !!! note Esto es un ejemplo de nota (note, seealso). !!! note \"Esta es una nota con t\u00edtulo\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! note \"Esta es una nota con t\u00edtulo\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! note \"\" Esta nota va sin t\u00edtulo. !!! note \"\" Esta nota va sin t\u00edtulo. En vez de note es posible utilizar las siguientes etiquetas: summary, info, tip, success, question, warning, failure, danger, bug y quote. !!! summary Esto es un ejemplo de sumario (summary, tldr). !!! info Esto es un ejemplo de bloque informativo (info, todo). !!! tip Esto es un ejemplo de consejo o truco (tip, hint, important). !!! success Esto es un ejemplo de bloque de \u00e9xito (success, check, done). !!! question Esto es un ejemplo de pregunta (question, help, faq). !!! warning Esto es un ejemplo de precauci\u00f3n (warning, caution, attention). !!! failure Esto es un ejemplo de fallo (failure, fail, missing). !!! danger Esto es un ejemplo de peligro (danger, error). !!! bug Esto es un ejemplo de error (bug). !!! quote Esto es un ejemplo de cita (quote, cite). Details Para crear bloques colapsables que puedan ocultar su contenido. Ejemplo: ??? \"Bloque cerrado. Abreme !!!\" Ahora lo has abierto. Resultado: ??? \"Bloque cerrado. Abreme !!!\" Ahora lo has abierto. Ejemplo: ???+ \"Bloque abierto inicialmente\" ??? \"Bloque dentro de otro bloque\" Algo de contenido. Resultado: ???+ \"Bloque abierto inicialmente\" ??? \"Bloque dentro de otro bloque\" Algo de contenido. Ejemplo: ??? danger \"Bloque con tema de peligro\" Algo de contenido. Resultado: ??? danger \"Bloque con tema de peligro\" Algo de contenido. ??? warning \"Bloque con tema de precauci\u00f3n\" Algo de contenido. ??? success \"Bloque con tema de \u00e9xito\" Algo de contenido. CodeHilite Extensi\u00f3n incluida en la librer\u00eda est\u00e1ndar de Markdown que permite resaltar la sintaxis de los bloques de c\u00f3digo. Como lenguajes soportados est\u00e1n entre otros: markdown, python, c, cpp, csharp, html, javascript, JSON, XML. Ejemplo utilizando comillas simples. ``` python import tensorflow as tf ``` Resultado: import tensorflow as tf Ejemplo utilizando bloque tabulado con cuatro espacios: :::python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Resultado: :::python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Ejemplo utilizando bloque tabulado y n\u00fameros de l\u00ednea: #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Resultado: #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Es posible resaltar l\u00edneas concretas de c\u00f3digo con hl_lines. #!python hl_lines=\"3 4\" Resultado: #!python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] InlineHilite Permite embeber c\u00f3digo en el texto mediante #!languaje code o bien :::languaje code entre comillas simples inversas. Ejemplo: Aqui se presenta este c\u00f3digo `#!c #include <stdio.h>` embebido en el texto. Resultado: Aqui se presenta este c\u00f3digo #!c #include <stdio.h> embebido en el texto. Ejemplo: Aqui se presenta este otro c\u00f3digo `:::c #include <stdlib.h>` embebido en el texto. Resultado: Aqui se presenta este otro c\u00f3digo :::c #include <stdlib.h> embebido en el texto. Ejemplo: C\u00f3digo javascript: `#!js function pad(v){return ('0'+v).split('').reverse().splice(0,2).reverse().join('')}`. Resultado: C\u00f3digo javascript: #!js function pad(v){return ('0'+v).split('').reverse().splice(0,2).reverse().join('')} . Mark Permite marcar texto en ==amarillo fosforito==. La anterior frase se ha generado as\u00ed: Permite marcar texto en ==amarillo fosforito==. Footnotes Otra extensi\u00f3n de la libreria est\u00e1ndar para incluir notas al pie de p\u00e1gina. Se inserta una referencia en el texto, la cual puede ser definida en cualquier parte del documento. La definici\u00f3n aparecer\u00e1 en el pie de p\u00e1gina. La referencia consiste en un sombrerete seguido de un identificador num\u00e9rico [1, 2, 3, ...] o bien de nombres [Cuartas et al. 2012]. Ejemplo: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Resultado: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] La definici\u00f3n de los contenidos de la nota al pie puede realizarse en una \u00fanica l\u00ednea si el texto es corto: [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. o bien en un bloque de texto indentado cuatro espacios, que comienze en la siguiente l\u00ednea de la etiqueta, si el texto es largo. [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Arithmatex MathJax Basado en MathJax . Permite introducir equaciones escritas en TeX dentro de bloques o en l\u00ednea con el texto. Ver este hilo para una r\u00e1pida referencia sobre la sintaxis TeX. Ejemplo: $$\\frac{n!}{k!(n-k)!} = \\binom{n}{k}$$ $$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$ Resultado: $$\\frac{n!}{k!(n-k)!} = \\binom{n}{k}$$ $$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$ Ejemplo: Lorem ipsum dolor sit amet: $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$ Resultado: Lorem ipsum dolor sit amet: $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$ Letras griegas :::markdown $\\alpha, \\beta, ..., \\omega$ $\\alpha, \\beta, ..., \\omega$ :::markdown $\\Gamma, \\Delta, ..., \\Omega$ $\\Gamma, \\Delta, ..., \\Omega$ Superindices y subindices :::markdown $x_i^2 \\log_2 x$ $x_i^2 \\log_2 x$ Grupos Super\u00edndices, sub\u00edndices y otras operaciones aplican solamente al siguiente \"grupo\". Un \"grupo\" es un \u00fanico s\u00edmbolo o un cualquier f\u00f3rmula ubicada entre llaves {...} :::markdown $10^10$ $10^10$ :::markdown $10^{10}$ $10^{10}$ :::markdown ${x^y}^z$ ${x^y}^z$","title":"Material Design"},{"location":"ayuda/material/#material-design","text":"Esta chuleta es un copia-pega modificado de esta p\u00e1gina . B\u00e1sicamente es un Markdown espec\u00edfico para poder ser usado con el tema Material Design y sacarle m\u00e1s partido.","title":"Material Design"},{"location":"ayuda/material/#enlaces","text":"Existe la posibilidad de utilizar referencias a enlaces que se definen posteriormente. En ese caso unicamente incluimos el n\u00famero de enlace. M\u00e1s adelante es necesario definir el enlace que corresponde con cada n\u00famero y, opcionalmente, un texto descriptivo. :::markdown Podemos comprar un ordenador (Dell)[1] o (Apple)[2]. [1]: http://dell.com/ \"Comprar en Dell\" [2]: http://apple.com/ \"Comprar en Apple\" Podemos comprar un ordenador Dell o Apple .","title":"Enlaces"},{"location":"ayuda/material/#imagenes","text":"Tambi\u00e9n es posible utilizar referencias que es necesario definir posteriormente. :::markdown ![texto alternativo][id] [id]: /img/md-logo.png \"Titulo opcional\"","title":"Imagenes"},{"location":"ayuda/material/#secuencias-de-escape","text":"Puede ocurrir que alguno de los caracteres especiales utilizados en markdown aparezcan de forma fortuita en el texto y originen efectos no deseados. Para evitarlo podemos utilizar las secuencias de escape para especificar que deseamos utilizar el caracter como texto sin que tenga ning\u00fan efecto colateral. Podemos utilizar el caracter '\\' junto con cualquiera de los siguientes para crear una secuencia de escape. \\ backslash ` backtick * asterisco _ underscore {} curly braces [] square brackets () parentheses # hash mark + plus sign - minus sign (hyphen) . dot ! exclamation mark","title":"Secuencias de escape"},{"location":"ayuda/material/#codigo","text":"Para marcar texto como c\u00f3digo es necesario indentar cada l\u00ednea del bloque con cuatro espacios o una tabulaci\u00f3n. Si el c\u00f3digo va embebido en un p\u00e1rrafo, es neceario rodearlo por comillas simples invertidas. Consultar la secci\u00f3n de CodeHilite y de InlineHilite para funcionalidades extendidas.","title":"C\u00f3digo"},{"location":"ayuda/material/#extensiones","text":"","title":"Extensiones"},{"location":"ayuda/material/#admonition","text":"Extensi\u00f3n incluida en la librer\u00eda est\u00e1ndar de Markdown que permite incluir contenido adicional en cajas de color con un t\u00edtulo y un icono. Por ejemplo para res\u00famenes, notas, consejos o avisos. !!! note Esto es un ejemplo de nota (note, seealso). !!! note Esto es un ejemplo de nota (note, seealso). !!! note \"Esta es una nota con t\u00edtulo\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! note \"Esta es una nota con t\u00edtulo\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. !!! note \"\" Esta nota va sin t\u00edtulo. !!! note \"\" Esta nota va sin t\u00edtulo. En vez de note es posible utilizar las siguientes etiquetas: summary, info, tip, success, question, warning, failure, danger, bug y quote. !!! summary Esto es un ejemplo de sumario (summary, tldr). !!! info Esto es un ejemplo de bloque informativo (info, todo). !!! tip Esto es un ejemplo de consejo o truco (tip, hint, important). !!! success Esto es un ejemplo de bloque de \u00e9xito (success, check, done). !!! question Esto es un ejemplo de pregunta (question, help, faq). !!! warning Esto es un ejemplo de precauci\u00f3n (warning, caution, attention). !!! failure Esto es un ejemplo de fallo (failure, fail, missing). !!! danger Esto es un ejemplo de peligro (danger, error). !!! bug Esto es un ejemplo de error (bug). !!! quote Esto es un ejemplo de cita (quote, cite).","title":"Admonition"},{"location":"ayuda/material/#details","text":"Para crear bloques colapsables que puedan ocultar su contenido. Ejemplo: ??? \"Bloque cerrado. Abreme !!!\" Ahora lo has abierto. Resultado: ??? \"Bloque cerrado. Abreme !!!\" Ahora lo has abierto. Ejemplo: ???+ \"Bloque abierto inicialmente\" ??? \"Bloque dentro de otro bloque\" Algo de contenido. Resultado: ???+ \"Bloque abierto inicialmente\" ??? \"Bloque dentro de otro bloque\" Algo de contenido. Ejemplo: ??? danger \"Bloque con tema de peligro\" Algo de contenido. Resultado: ??? danger \"Bloque con tema de peligro\" Algo de contenido. ??? warning \"Bloque con tema de precauci\u00f3n\" Algo de contenido. ??? success \"Bloque con tema de \u00e9xito\" Algo de contenido.","title":"Details"},{"location":"ayuda/material/#codehilite","text":"Extensi\u00f3n incluida en la librer\u00eda est\u00e1ndar de Markdown que permite resaltar la sintaxis de los bloques de c\u00f3digo. Como lenguajes soportados est\u00e1n entre otros: markdown, python, c, cpp, csharp, html, javascript, JSON, XML. Ejemplo utilizando comillas simples. ``` python import tensorflow as tf ``` Resultado: import tensorflow as tf Ejemplo utilizando bloque tabulado con cuatro espacios: :::python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Resultado: :::python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Ejemplo utilizando bloque tabulado y n\u00fameros de l\u00ednea: #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Resultado: #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Es posible resaltar l\u00edneas concretas de c\u00f3digo con hl_lines. #!python hl_lines=\"3 4\" Resultado: #!python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j]","title":"CodeHilite"},{"location":"ayuda/material/#inlinehilite","text":"Permite embeber c\u00f3digo en el texto mediante #!languaje code o bien :::languaje code entre comillas simples inversas. Ejemplo: Aqui se presenta este c\u00f3digo `#!c #include <stdio.h>` embebido en el texto. Resultado: Aqui se presenta este c\u00f3digo #!c #include <stdio.h> embebido en el texto. Ejemplo: Aqui se presenta este otro c\u00f3digo `:::c #include <stdlib.h>` embebido en el texto. Resultado: Aqui se presenta este otro c\u00f3digo :::c #include <stdlib.h> embebido en el texto. Ejemplo: C\u00f3digo javascript: `#!js function pad(v){return ('0'+v).split('').reverse().splice(0,2).reverse().join('')}`. Resultado: C\u00f3digo javascript: #!js function pad(v){return ('0'+v).split('').reverse().splice(0,2).reverse().join('')} .","title":"InlineHilite"},{"location":"ayuda/material/#mark","text":"Permite marcar texto en ==amarillo fosforito==. La anterior frase se ha generado as\u00ed: Permite marcar texto en ==amarillo fosforito==.","title":"Mark"},{"location":"ayuda/material/#footnotes","text":"Otra extensi\u00f3n de la libreria est\u00e1ndar para incluir notas al pie de p\u00e1gina. Se inserta una referencia en el texto, la cual puede ser definida en cualquier parte del documento. La definici\u00f3n aparecer\u00e1 en el pie de p\u00e1gina. La referencia consiste en un sombrerete seguido de un identificador num\u00e9rico [1, 2, 3, ...] o bien de nombres [Cuartas et al. 2012]. Ejemplo: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Resultado: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] La definici\u00f3n de los contenidos de la nota al pie puede realizarse en una \u00fanica l\u00ednea si el texto es corto: [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. o bien en un bloque de texto indentado cuatro espacios, que comienze en la siguiente l\u00ednea de la etiqueta, si el texto es largo. [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Footnotes"},{"location":"ayuda/material/#arithmatex-mathjax","text":"Basado en MathJax . Permite introducir equaciones escritas en TeX dentro de bloques o en l\u00ednea con el texto. Ver este hilo para una r\u00e1pida referencia sobre la sintaxis TeX. Ejemplo: $$\\frac{n!}{k!(n-k)!} = \\binom{n}{k}$$ $$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$ Resultado: $$\\frac{n!}{k!(n-k)!} = \\binom{n}{k}$$ $$\\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6}$$ Ejemplo: Lorem ipsum dolor sit amet: $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$ Resultado: Lorem ipsum dolor sit amet: $p(x|y) = \\frac{p(y|x)p(x)}{p(y)}$","title":"Arithmatex MathJax"},{"location":"ayuda/material/#letras-griegas","text":":::markdown $\\alpha, \\beta, ..., \\omega$ $\\alpha, \\beta, ..., \\omega$ :::markdown $\\Gamma, \\Delta, ..., \\Omega$ $\\Gamma, \\Delta, ..., \\Omega$","title":"Letras griegas"},{"location":"ayuda/material/#superindices-y-subindices","text":":::markdown $x_i^2 \\log_2 x$ $x_i^2 \\log_2 x$","title":"Superindices y subindices"},{"location":"ayuda/material/#grupos","text":"Super\u00edndices, sub\u00edndices y otras operaciones aplican solamente al siguiente \"grupo\". Un \"grupo\" es un \u00fanico s\u00edmbolo o un cualquier f\u00f3rmula ubicada entre llaves {...} :::markdown $10^10$ $10^10$ :::markdown $10^{10}$ $10^{10}$ :::markdown ${x^y}^z$ ${x^y}^z$","title":"Grupos"},{"location":"cad/","text":"CAD files are here :)","title":"Index"},{"location":"cad/archivosCAD/","text":"Archivos en FreeCAD Descarga aqu\u00ed los archivos en FreeCAD Imagen Archivo CAD Comentario Ballcaster Proporciona un soporte al Rupertobot, intentando reducir el rozamiento con el suelo al m\u00ednimo Plataforma inferior Incorpora un sistema de sujeci\u00f3n para bol\u00edgrafo o rotulador (experimental, pero la idea es que el Rupertobot acabe dibujando) Plataforma superior Tiene pendiente alguna se\u00f1al que mejore la orientaci\u00f3n a la hora de montarlo sobre la plataforma inferior Columna Une las plataformas superior e inferior con un ingenioso (a m\u00ed me lo parece) sistema de tornillos y tuercas (Necesitas imprimir seis) Rueda La rueda es la del Masaylo (que para eso lo dise\u00f1\u00e9 yo, aunque me ayudaron los compis del Club de Rob\u00f3tica de Granada). En realidad, te sirve cualquier rueda del Escornabot Esta pieza, lo confieso, se la he fusilado directamente desde nuestro Masaylo a Federico Coca . Que la fuerza te acompa\u00f1e siempre, Fede.","title":"Archivos en FreeCAD (modificables)"},{"location":"cad/archivosCAD/#archivos-en-freecad","text":"","title":"Archivos en FreeCAD"},{"location":"cad/archivosCAD/#descarga-aqui-los-archivos-en-freecad","text":"Imagen Archivo CAD Comentario Ballcaster Proporciona un soporte al Rupertobot, intentando reducir el rozamiento con el suelo al m\u00ednimo Plataforma inferior Incorpora un sistema de sujeci\u00f3n para bol\u00edgrafo o rotulador (experimental, pero la idea es que el Rupertobot acabe dibujando) Plataforma superior Tiene pendiente alguna se\u00f1al que mejore la orientaci\u00f3n a la hora de montarlo sobre la plataforma inferior Columna Une las plataformas superior e inferior con un ingenioso (a m\u00ed me lo parece) sistema de tornillos y tuercas (Necesitas imprimir seis) Rueda La rueda es la del Masaylo (que para eso lo dise\u00f1\u00e9 yo, aunque me ayudaron los compis del Club de Rob\u00f3tica de Granada). En realidad, te sirve cualquier rueda del Escornabot Esta pieza, lo confieso, se la he fusilado directamente desde nuestro Masaylo a Federico Coca . Que la fuerza te acompa\u00f1e siempre, Fede.","title":"Descarga aqu\u00ed los archivos en FreeCAD"},{"location":"instalacion/instalacion/","text":"Instalaci\u00f3n TODO: Instrucciones para instalar. Si hay instrucciones para cada Sistema Operativo deja los 3 enlaces de abajo y rellena cada respectivo fichero. Si no se necesitan muchas instrucciones para instalar o no se puede en todos los Sistemas Operativos, quita los enlaces de abajo y comenta en la secci\u00f3n 5 nav del fichero mkdocs.yml sus l\u00edneas, por \u00faltimo a\u00f1ade aqu\u00ed las instrucciones de instalaci\u00f3n. Instalaci\u00f3n en Windows . Instalaci\u00f3n en MacOS . Instalaci\u00f3n en Linux .","title":"Instalaci\u00f3n"},{"location":"instalacion/instalacion/#instalacion","text":"TODO: Instrucciones para instalar. Si hay instrucciones para cada Sistema Operativo deja los 3 enlaces de abajo y rellena cada respectivo fichero. Si no se necesitan muchas instrucciones para instalar o no se puede en todos los Sistemas Operativos, quita los enlaces de abajo y comenta en la secci\u00f3n 5 nav del fichero mkdocs.yml sus l\u00edneas, por \u00faltimo a\u00f1ade aqu\u00ed las instrucciones de instalaci\u00f3n. Instalaci\u00f3n en Windows . Instalaci\u00f3n en MacOS . Instalaci\u00f3n en Linux .","title":"Instalaci\u00f3n"},{"location":"instalacion/linux/","text":"Instalaci\u00f3n en Linux TODO: Ubuntu - Debian TODO: Red Hat TODO: Arch - Manjaro TODO: Raspberry Pi TODO:","title":"Instalaci\u00f3n en Linux"},{"location":"instalacion/linux/#instalacion-en-linux","text":"TODO:","title":"Instalaci\u00f3n en Linux"},{"location":"instalacion/linux/#ubuntu-debian","text":"TODO:","title":"Ubuntu - Debian"},{"location":"instalacion/linux/#red-hat","text":"TODO:","title":"Red Hat"},{"location":"instalacion/linux/#arch-manjaro","text":"TODO:","title":"Arch - Manjaro"},{"location":"instalacion/linux/#raspberry-pi","text":"TODO:","title":"Raspberry Pi"},{"location":"instalacion/macos/","text":"Instalaci\u00f3n en Mac OS TODO:","title":"Instalaci\u00f3n en Mac OS"},{"location":"instalacion/macos/#instalacion-en-mac-os","text":"TODO:","title":"Instalaci\u00f3n en Mac OS"},{"location":"instalacion/windows/","text":"Instalacion en Windows TODO:","title":"Instalacion en Windows"},{"location":"instalacion/windows/#instalacion-en-windows","text":"TODO:","title":"Instalacion en Windows"}]}